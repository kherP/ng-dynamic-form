{
    "pipes": [
        {
            "name": "SafePipe",
            "id": "pipe-SafePipe-7c7c92cd02de52299f1f40086b1a62d5",
            "file": "projects/dynamic-form/src/lib/safe.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safe",
            "sourceCode": "import { NgModule, Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from \"@angular/platform-browser\";\n\n@Pipe({\n    name: \"safe\",\n})\nexport class SafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case \"html\":\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n            case \"style\":\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            case \"script\":\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case \"url\":\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case \"resourceUrl\":\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@NgModule({\n    declarations: [SafePipe],\n    exports: [SafePipe],\n})\nexport class SafePipeModule {}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AttributeTypeMap",
            "id": "interface-AttributeTypeMap-a2afd4e1d18d6f2ebac62ed26c9c7ae1",
            "file": "projects/dynamic-form/src/lib/model/models.ts",
            "type": "interface",
            "sourceCode": "export * from './dynamicFormItem';\nexport * from './dynamicFormOption';\nexport * from './dynamicFormResponseItem';\nexport * from './dynamicFormSection';\nexport * from './dynamicFormType';\nexport * from './custom-classes/extended-form-array';\nexport * from './custom-classes/extended-form-control';\nexport * from './custom-classes/extended-form-group';\nexport * from './custom-classes/extended-form-group-array';\n\nexport interface AttributeTypeMap {\n  name: string;\n  type: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ConfirmInformation",
            "id": "interface-ConfirmInformation-2b4bf2dac69a6c6832d28e4b3a9ddbfd",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
            "type": "interface",
            "sourceCode": "import { AttributeTypeMap } from './models';\nimport { DynamicFormItem, Media } from './dynamicFormItem';\nimport { DynamicFormSection } from './dynamicFormSection';\n\nexport interface ConfirmInformation {\n  title?: string;\n  message?: string;\n  accept?: string;\n  deny?: string;\n}\n\nexport interface FollowUpItem {\n  type: string;\n  items: DynamicFormItem[];\n  multi?: boolean;\n}\n\nexport interface DynamicFormOption<T = any> {\n  id?: string;\n  value?: T;\n  label?: string | null;\n  disabled?: boolean | null;\n  category?: string;\n  order?: number;\n  confirm?: ConfirmInformation;\n  media?: Media[];\n  followUpItems?: FollowUpItem;\n}\n\nexport const attributeTypeMapDynamicFormOption: AttributeTypeMap[] = [\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n];\n",
            "properties": [
                {
                    "name": "accept",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deny",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DynamicFormItem",
            "id": "interface-DynamicFormItem-41ef39e74feaf1ab456d0d702c9101b2",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from \"./dynamicFormType\";\nimport { DynamicFormOption } from \"./dynamicFormOption\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport enum RuleType {\n    required,\n    min,\n    max,\n    minLength,\n    maxLength,\n    pattern,\n    minThanReference,\n    minThanEqualsReference,\n    maxThanReference,\n    maxThanEqualReference,\n    confirm,\n}\n\nexport enum MediaKind {\n    Image,\n    Video,\n}\n\nexport interface formItemValidation {\n    required?: boolean;\n    min?: number | string;\n    max?: number | string;\n    minLength?: number | string;\n    maxLength?: number | string;\n}\n\nexport interface Rule {\n    value?: any;\n    message?: string;\n    type: RuleType;\n}\n\nexport interface Media {\n    id: string;\n    url: string;\n    kind: MediaKind;\n    mimeType: string;\n    name: string;\n    description: string;\n}\n\nexport interface DynamicFormItem {\n    key: string | null;\n    category?: string | null; //subTitle\n    title?: string | null; //name\n    value?: any;\n    label?: string | null;\n    descriptionHeader?: string | null; //text\n    description?: string | null;\n    media?: Media[];\n    className?: string | null;\n    multi?: boolean;\n    order?: number;\n    placeholder?: string | null;\n    options?: Array<DynamicFormOption> | null;\n    rulerKey?: string | null;\n    condition?: any;\n    controlType: DynamicFormType;\n    rules?: Rule[];\n    controlMetaData?: {\n        label?: string;\n        description?: string;\n        inputGroupLabel?: string;\n        inputGroupPosition?: \"left\" | \"right\";\n    };\n}\n\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n];\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "className",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "condition",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "controlMetaData",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "controlType",
                    "type": "DynamicFormType",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "description",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "descriptionHeader",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "key",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "label",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "media",
                    "type": "Media[]",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "multi",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "options",
                    "type": "Array<DynamicFormOption> | null",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "placeholder",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "rulerKey",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "rules",
                    "type": "Rule[]",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "title",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DynamicFormOption",
            "id": "interface-DynamicFormOption-2b4bf2dac69a6c6832d28e4b3a9ddbfd",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
            "type": "interface",
            "sourceCode": "import { AttributeTypeMap } from './models';\nimport { DynamicFormItem, Media } from './dynamicFormItem';\nimport { DynamicFormSection } from './dynamicFormSection';\n\nexport interface ConfirmInformation {\n  title?: string;\n  message?: string;\n  accept?: string;\n  deny?: string;\n}\n\nexport interface FollowUpItem {\n  type: string;\n  items: DynamicFormItem[];\n  multi?: boolean;\n}\n\nexport interface DynamicFormOption<T = any> {\n  id?: string;\n  value?: T;\n  label?: string | null;\n  disabled?: boolean | null;\n  category?: string;\n  order?: number;\n  confirm?: ConfirmInformation;\n  media?: Media[];\n  followUpItems?: FollowUpItem;\n}\n\nexport const attributeTypeMapDynamicFormOption: AttributeTypeMap[] = [\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n];\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "confirm",
                    "type": "ConfirmInformation",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "disabled",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "followUpItems",
                    "type": "FollowUpItem",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "label",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "media",
                    "type": "Media[]",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DynamicFormResponseItem",
            "id": "interface-DynamicFormResponseItem-b8bcfd6945bc1138c967c09552ff924e",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
            "type": "interface",
            "sourceCode": "import { DynamicFormItem } from \"./dynamicFormItem\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport interface DynamicFormResponseItem {\n    key?: string | null;\n    value?: object | null;\n    sectionId?: string | null;\n    sectionIndex?: number;\n    formItem?: DynamicFormItem | null;\n}\n\nexport const attributeTypeMapDynamicFormResponseItem: AttributeTypeMap[] = [\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"sectionId\", type: \"string\" },\n    { name: \"sectionIndex\", type: \"number\" },\n    { name: \"formItem\", type: \"DynamicFormItem\" },\n];\n",
            "properties": [
                {
                    "name": "formItem",
                    "type": "DynamicFormItem | null",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "key",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sectionId",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sectionIndex",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "type": "object | null",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DynamicFormSection",
            "id": "interface-DynamicFormSection-19626caed1ba59cf8d1270b600365eec",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
            "type": "interface",
            "sourceCode": "import { DynamicFormItem } from \"./dynamicFormItem\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport interface DynamicFormSection {\n    title?: string | null;\n    category?: string | null;\n    description?: string | null;\n    text?: string | null;\n    className?: string | null;\n    key?: string | null;\n    order?: number;\n    multi?: boolean;\n    sectionType?: any;\n    items?: DynamicFormItem[] | null;\n}\n\nexport const attributeTypeMapDynamicFormSection: AttributeTypeMap[] = [\n    { name: \"title\", type: \"string\" },\n    { name: \"category\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"key\", type: \"string\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"sectionType\", type: \"any\" },\n    { name: \"items\", type: \"Array<DynamicFormItem>\" },\n];\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "className",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "items",
                    "type": "DynamicFormItem[] | null",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "key",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "multi",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sectionType",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "text",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ExtendedFormGroupControls",
            "id": "interface-ExtendedFormGroupControls-a2f80beccb3c3d59794888f4d46989b3",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
            "type": "interface",
            "sourceCode": "import { FormGroup, ValidatorFn, AbstractControlOptions, AsyncValidatorFn } from \"@angular/forms\";\nimport { DynamicFormSection } from \"../../model/dynamicFormSection\";\nimport { ExtendedFormControl } from \"./extended-form-control\";\nimport { ExtendedFormArray } from \"./extended-form-array\";\nimport { ExtendedFormGroupArray } from \"./extended-form-group-array\";\nexport interface ExtendedFormGroupControls {\n    [key: string]: ExtendedFormGroupControl | ExtendedFormGroup;\n}\n\nexport type ExtendedFormGroupControl = ExtendedFormControl | ExtendedFormArray | ExtendedFormGroup | ExtendedFormGroupArray;\n\nexport class ExtendedFormGroup extends FormGroup {\n    sectionItem: DynamicFormSection;\n\n    constructor(\n        controls: ExtendedFormGroupControls,\n        item?: DynamicFormSection,\n        validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions,\n        asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n    ) {\n        super(controls, validatorOrOpts, asyncValidator);\n        this.sectionItem = item;\n    }\n\n    get(path: string | (string | number)[]): ExtendedFormGroupControl {\n        return super.get(path) as ExtendedFormGroupControl;\n    }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-a2f80beccb3c3d59794888f4d46989b3",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "ExtendedFormGroupControl | ExtendedFormGroup",
                    "line": 6
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "FollowUpItem",
            "id": "interface-FollowUpItem-2b4bf2dac69a6c6832d28e4b3a9ddbfd",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
            "type": "interface",
            "sourceCode": "import { AttributeTypeMap } from './models';\nimport { DynamicFormItem, Media } from './dynamicFormItem';\nimport { DynamicFormSection } from './dynamicFormSection';\n\nexport interface ConfirmInformation {\n  title?: string;\n  message?: string;\n  accept?: string;\n  deny?: string;\n}\n\nexport interface FollowUpItem {\n  type: string;\n  items: DynamicFormItem[];\n  multi?: boolean;\n}\n\nexport interface DynamicFormOption<T = any> {\n  id?: string;\n  value?: T;\n  label?: string | null;\n  disabled?: boolean | null;\n  category?: string;\n  order?: number;\n  confirm?: ConfirmInformation;\n  media?: Media[];\n  followUpItems?: FollowUpItem;\n}\n\nexport const attributeTypeMapDynamicFormOption: AttributeTypeMap[] = [\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n];\n",
            "properties": [
                {
                    "name": "items",
                    "type": "DynamicFormItem[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "multi",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "formItemValidation",
            "id": "interface-formItemValidation-41ef39e74feaf1ab456d0d702c9101b2",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from \"./dynamicFormType\";\nimport { DynamicFormOption } from \"./dynamicFormOption\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport enum RuleType {\n    required,\n    min,\n    max,\n    minLength,\n    maxLength,\n    pattern,\n    minThanReference,\n    minThanEqualsReference,\n    maxThanReference,\n    maxThanEqualReference,\n    confirm,\n}\n\nexport enum MediaKind {\n    Image,\n    Video,\n}\n\nexport interface formItemValidation {\n    required?: boolean;\n    min?: number | string;\n    max?: number | string;\n    minLength?: number | string;\n    maxLength?: number | string;\n}\n\nexport interface Rule {\n    value?: any;\n    message?: string;\n    type: RuleType;\n}\n\nexport interface Media {\n    id: string;\n    url: string;\n    kind: MediaKind;\n    mimeType: string;\n    name: string;\n    description: string;\n}\n\nexport interface DynamicFormItem {\n    key: string | null;\n    category?: string | null; //subTitle\n    title?: string | null; //name\n    value?: any;\n    label?: string | null;\n    descriptionHeader?: string | null; //text\n    description?: string | null;\n    media?: Media[];\n    className?: string | null;\n    multi?: boolean;\n    order?: number;\n    placeholder?: string | null;\n    options?: Array<DynamicFormOption> | null;\n    rulerKey?: string | null;\n    condition?: any;\n    controlType: DynamicFormType;\n    rules?: Rule[];\n    controlMetaData?: {\n        label?: string;\n        description?: string;\n        inputGroupLabel?: string;\n        inputGroupPosition?: \"left\" | \"right\";\n    };\n}\n\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n];\n",
            "properties": [
                {
                    "name": "max",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "maxLength",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "min",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "minLength",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicFormValidationError",
            "id": "interface-IDynamicFormValidationError-707478081013a2af325b46ac52bfbfaa",
            "file": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { KeyValue } from '@angular/common';\nimport { DynamicFormItem, DynamicFormOption } from './model/models';\nimport {\n  ExtendedFormGroup,\n  ExtendedFormGroupControls,\n} from './model/custom-classes/extended-form-group';\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\nimport { FormService } from './form.service';\n\ninterface IDynamicFormValidationError {\n  key: string;\n  errorMessage: string;\n  sectionId: string;\n  sectionIndex: number;\n  formItem: Partial<DynamicFormItem>;\n}\n\nexport interface IFormAction {\n  hasAction: boolean;\n  label?: string;\n}\n/** some comment */\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [FormService],\n  styles: [\n    `\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    `,\n  ],\n})\nexport class DynamicFormComponent {\n  @Input() extendedFormGroup: ExtendedFormGroup;\n  @Input() activeStep: number;\n  @Input() sectionTemplate: TemplateRef<any>;\n  @Input() itemTemplate: TemplateRef<any>;\n  @Input() actionsTemplate: TemplateRef<any>;\n  @Input() disclaimerTemplate: TemplateRef<any>;\n  @Input() itemCustomClass: string;\n  @Input() hasFormActions: boolean = true;\n  @Input() nextAction: IFormAction = {\n    hasAction: true,\n    label: 'Next',\n  };\n  @Input() previousAction: IFormAction = {\n    hasAction: true,\n    label: 'Previous',\n  };\n  @Input() cancelAction: IFormAction = {\n    hasAction: true,\n    label: 'Cancel',\n  };\n  @Output() previousEvent: EventEmitter<any> = new EventEmitter();\n  @Output() nextEvent: EventEmitter<any> = new EventEmitter();\n  @Output() cancelEvent: EventEmitter<any> = new EventEmitter();\n\n  submitted: boolean = false;\n\n  newFormGroup: { form: ExtendedFormGroup; index: number } = {\n    form: null,\n    index: null,\n  };\n\n  followUpModalToggle: boolean = false;\n\n  constructor(\n    private formService: FormService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  shouldRenderFollowUpControlsType(key: any): string {\n    if (key.value?.followUpItems) {\n      return key.value?.followUpItems.type;\n    }\n  }\n\n  dimissFollowUpModal(item: ExtendedFormControl): void {\n    this.followUpModalToggle = false;\n    !item.formGroup && item?.reset();\n  }\n\n  saveFollowUpModal(param: {\n    item: ExtendedFormGroup;\n    control: ExtendedFormControl;\n  }): void {\n    const { item, control } = param;\n    if (item.valid) {\n      if (this.newFormGroup.index !== null) {\n        (control.formGroup as ExtendedFormGroupArray).setControl(\n          this.newFormGroup.index,\n          item\n        );\n      } else {\n        if (!control.formGroup?.controls?.length) {\n          control.formGroup = new ExtendedFormGroupArray([item]);\n        } else {\n          (control.formGroup as ExtendedFormGroupArray).push(item);\n        }\n      }\n      this.followUpModalToggle = false;\n      this.cd.detectChanges();\n    }\n  }\n\n  createFormGroup(item: any) {\n    this.newFormGroup = {\n      form: this.formService.dynamicFormItemsToFormGroup(item),\n      index: null,\n    };\n    this.followUpModalToggle = true;\n  }\n\n  modalShouldBeRendered(control): boolean {\n    if (control.value?.followUpItems) {\n      return !!this.newFormGroup.form;\n    }\n  }\n\n  /**\n   * SHOULD RENDER CONTROL:\n   * Determines if the form control should be rendered or not.\n   * @param key section key\n   * @param formItem the target form item that should or should not be displayed\n   * @param index if the formgroup is an array this is the index of the formgroup item\n   */\n  shouldRenderControl(\n    key: string,\n    formItem: DynamicFormItem,\n    index?: number\n  ): boolean {\n    if (this.extendedFormGroup.controls)\n      if (formItem?.rulerKey) {\n        // It has a ruler key, trying to find the ruler and it's value\n        let ruler: ExtendedFormControl;\n        if (index > -1) {\n          // the form control where the ruler should be is an array\n          const target: ExtendedFormControl = (this.extendedFormGroup.get(\n            key\n          ) as ExtendedFormGroupArray)\n            .at(index)\n            .get(formItem.rulerKey) as ExtendedFormControl;\n          if (target) {\n            ruler = target;\n          }\n        } else {\n          // no array index: the form control where the ruler should be is a regular form\n          ruler = this.extendedFormGroup\n            ?.get(key)\n            ?.get(formItem.rulerKey) as ExtendedFormControl;\n        }\n        const rulerValue: any = ruler.value;\n        const { condition }: DynamicFormItem = formItem;\n        if (rulerValue === undefined || condition === undefined) {\n          console.warn(\n            'Something went wrong in shouldRenderControl: Ruler value or condition could not be found.'\n          );\n          return false;\n        }\n        if (\n          typeof rulerValue === 'string' &&\n          rulerValue === (condition as any)\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          condition &&\n          typeof condition === 'object' &&\n          Array.isArray(condition)\n        ) {\n          for (const conditionItem of condition as Array<any>) {\n            if (conditionItem) {\n              if (typeof rulerValue === 'object' && Array.isArray(rulerValue)) {\n                for (const rulerValueItem of rulerValue as Array<any>) {\n                  if (\n                    rulerValueItem &&\n                    rulerValueItem.value === conditionItem.value\n                  ) {\n                    return this.shouldRenderControl(key, ruler.formItem, index);\n                  }\n                }\n              } else if (\n                typeof rulerValue === 'object' &&\n                !Array.isArray(rulerValue)\n              ) {\n                if (rulerValue && rulerValue.value === conditionItem.value) {\n                  return this.shouldRenderControl(key, ruler.formItem, index);\n                }\n              }\n            }\n          }\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'object' &&\n          !Array.isArray(rulerValue) &&\n          rulerValue.value === (condition as DynamicFormOption).value\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'boolean' &&\n          rulerValue === condition\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        }\n        return false;\n      }\n    return true;\n  }\n\n  /**\n   * ADD NEW ITEM TO FORM ARRAY WITH ID:\n   * Duplicates the whole section or a form item within a section\n   * @param key section key\n   * @param id the id of the form item which should be duplicated\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  addNewItemToFormArrayWithId(\n    key: string,\n    id?: string,\n    sectionIndex?: number\n  ): void {\n    if (id) {\n      // There is an id which means we want to duplicate a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to duplicate should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(id) as ExtendedFormArray).push(new FormControl(''));\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup.get(key).get(id) as ExtendedFormArray).push(\n          new FormControl('')\n        );\n      }\n    } else {\n      // There is no id which means we want to duplicate the entire section\n      const target: ExtendedFormGroupArray = this.extendedFormGroup.get(\n        key\n      ) as ExtendedFormGroupArray;\n      const childControls: ExtendedFormGroupControls = this.formService.dynamicFormItemsToControls(\n        target.sectionItem.items\n      );\n      const formGroup: ExtendedFormGroup = new ExtendedFormGroup(\n        childControls,\n        target.sectionItem\n      );\n      target.push(formGroup);\n    }\n  }\n\n  /**\n   * REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\n   * Removes the whole section or a form item within a section\n   * @param key section key\n   * @param info the id of the form item which should be removed and the index of where to remove it\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  removeItemAtIndexFromFormArrayWithId(\n    key: string,\n    info?: { id: string; index: number },\n    sectionIndex?: number\n  ): void {\n    if (info && info.id) {\n      // There is info which means we want to remove a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to remove should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(info.id) as ExtendedFormArray).removeAt(info.index);\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup\n          .get(key)\n          .get(info.id) as ExtendedFormArray).removeAt(info.index);\n      }\n    } else {\n      // there is no info indicating we should use the section index to remove the section itself\n      if (sectionIndex > -1) {\n        (this.extendedFormGroup.get(key) as ExtendedFormGroupArray).removeAt(\n          sectionIndex\n        );\n      } else {\n        console.warn(\n          'Error at removeItemAtIndexFromFormArrayWithId: Tried to remove section but no section index was provided'\n        );\n      }\n    }\n  }\n\n  removeItemFromParent(param: {\n    form: ExtendedFormControl;\n    index: number;\n  }): void {\n    const { form, index } = param;\n    (form.formGroup as ExtendedFormGroupArray).removeAt(index);\n    // reset parent control if the formGroup property doesn't have controls\n    if (!(form.formGroup as ExtendedFormGroupArray).controls?.length) {\n      form.reset();\n    }\n    this.followUpModalToggle = false;\n  }\n\n  editItemFromParent(param: {\n    formArray: ExtendedFormArray;\n    index: number;\n  }): void {\n    const { formArray, index } = param;\n    this.newFormGroup = {\n      form: new ExtendedFormGroup(\n        (formArray.at(index) as ExtendedFormGroup)\n          .controls as ExtendedFormGroupControls\n      ),\n      index,\n    };\n    this.followUpModalToggle = true;\n  }\n\n  orderForm = (\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\n  ): number => {\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\n      return (\n        (a.value as ExtendedFormGroup).sectionItem.order -\n        (b.value as ExtendedFormGroup).sectionItem.order\n      );\n    } else if (a.value['formItem'] && b.value['formItem']) {\n      return (\n        (a.value as ExtendedFormControl).formItem.order -\n        (b.value as ExtendedFormControl).formItem.order\n      );\n    }\n    return 0;\n  };\n\n  getFormArrayControls(\n    control: ExtendedFormGroupArray\n  ): Array<ExtendedFormGroup> {\n    if (control instanceof ExtendedFormGroupArray) {\n      return control.controls as Array<ExtendedFormGroup>;\n    } else {\n      console.warn(\n        'Error in getFormArrayControls: control is not an instance of ExtendedFormGroupArray'\n      );\n      return [];\n    }\n  }\n\n  controlValueChanged(): void {\n    this.submitted &&= false;\n  }\n\n  get sectionList() {\n    if (this.activeStep !== null) {\n      return [\n        this.extendedFormGroup.controls[\n          Object.keys(this.extendedFormGroup.controls)[this.activeStep]\n        ],\n      ];\n    } else {\n      return this.extendedFormGroup.controls;\n    }\n  }\n\n  validate(): void {\n    console.log(this.extendedFormGroup);\n  }\n\n  cancel(): void {\n    this.cancelEvent.emit();\n  }\n\n  next(): void {\n    this.submitted = true;\n    if (this.formService.validateForm(this.sectionList[0])) {\n      this.nextEvent?.emit();\n      this.submitted = false;\n    }\n  }\n\n  previous(): void {\n    this.previousEvent.emit();\n  }\n}\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "formItem",
                    "type": "Partial<DynamicFormItem>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sectionId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sectionIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IFormAction",
            "id": "interface-IFormAction-707478081013a2af325b46ac52bfbfaa",
            "file": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { KeyValue } from '@angular/common';\nimport { DynamicFormItem, DynamicFormOption } from './model/models';\nimport {\n  ExtendedFormGroup,\n  ExtendedFormGroupControls,\n} from './model/custom-classes/extended-form-group';\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\nimport { FormService } from './form.service';\n\ninterface IDynamicFormValidationError {\n  key: string;\n  errorMessage: string;\n  sectionId: string;\n  sectionIndex: number;\n  formItem: Partial<DynamicFormItem>;\n}\n\nexport interface IFormAction {\n  hasAction: boolean;\n  label?: string;\n}\n/** some comment */\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [FormService],\n  styles: [\n    `\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    `,\n  ],\n})\nexport class DynamicFormComponent {\n  @Input() extendedFormGroup: ExtendedFormGroup;\n  @Input() activeStep: number;\n  @Input() sectionTemplate: TemplateRef<any>;\n  @Input() itemTemplate: TemplateRef<any>;\n  @Input() actionsTemplate: TemplateRef<any>;\n  @Input() disclaimerTemplate: TemplateRef<any>;\n  @Input() itemCustomClass: string;\n  @Input() hasFormActions: boolean = true;\n  @Input() nextAction: IFormAction = {\n    hasAction: true,\n    label: 'Next',\n  };\n  @Input() previousAction: IFormAction = {\n    hasAction: true,\n    label: 'Previous',\n  };\n  @Input() cancelAction: IFormAction = {\n    hasAction: true,\n    label: 'Cancel',\n  };\n  @Output() previousEvent: EventEmitter<any> = new EventEmitter();\n  @Output() nextEvent: EventEmitter<any> = new EventEmitter();\n  @Output() cancelEvent: EventEmitter<any> = new EventEmitter();\n\n  submitted: boolean = false;\n\n  newFormGroup: { form: ExtendedFormGroup; index: number } = {\n    form: null,\n    index: null,\n  };\n\n  followUpModalToggle: boolean = false;\n\n  constructor(\n    private formService: FormService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  shouldRenderFollowUpControlsType(key: any): string {\n    if (key.value?.followUpItems) {\n      return key.value?.followUpItems.type;\n    }\n  }\n\n  dimissFollowUpModal(item: ExtendedFormControl): void {\n    this.followUpModalToggle = false;\n    !item.formGroup && item?.reset();\n  }\n\n  saveFollowUpModal(param: {\n    item: ExtendedFormGroup;\n    control: ExtendedFormControl;\n  }): void {\n    const { item, control } = param;\n    if (item.valid) {\n      if (this.newFormGroup.index !== null) {\n        (control.formGroup as ExtendedFormGroupArray).setControl(\n          this.newFormGroup.index,\n          item\n        );\n      } else {\n        if (!control.formGroup?.controls?.length) {\n          control.formGroup = new ExtendedFormGroupArray([item]);\n        } else {\n          (control.formGroup as ExtendedFormGroupArray).push(item);\n        }\n      }\n      this.followUpModalToggle = false;\n      this.cd.detectChanges();\n    }\n  }\n\n  createFormGroup(item: any) {\n    this.newFormGroup = {\n      form: this.formService.dynamicFormItemsToFormGroup(item),\n      index: null,\n    };\n    this.followUpModalToggle = true;\n  }\n\n  modalShouldBeRendered(control): boolean {\n    if (control.value?.followUpItems) {\n      return !!this.newFormGroup.form;\n    }\n  }\n\n  /**\n   * SHOULD RENDER CONTROL:\n   * Determines if the form control should be rendered or not.\n   * @param key section key\n   * @param formItem the target form item that should or should not be displayed\n   * @param index if the formgroup is an array this is the index of the formgroup item\n   */\n  shouldRenderControl(\n    key: string,\n    formItem: DynamicFormItem,\n    index?: number\n  ): boolean {\n    if (this.extendedFormGroup.controls)\n      if (formItem?.rulerKey) {\n        // It has a ruler key, trying to find the ruler and it's value\n        let ruler: ExtendedFormControl;\n        if (index > -1) {\n          // the form control where the ruler should be is an array\n          const target: ExtendedFormControl = (this.extendedFormGroup.get(\n            key\n          ) as ExtendedFormGroupArray)\n            .at(index)\n            .get(formItem.rulerKey) as ExtendedFormControl;\n          if (target) {\n            ruler = target;\n          }\n        } else {\n          // no array index: the form control where the ruler should be is a regular form\n          ruler = this.extendedFormGroup\n            ?.get(key)\n            ?.get(formItem.rulerKey) as ExtendedFormControl;\n        }\n        const rulerValue: any = ruler.value;\n        const { condition }: DynamicFormItem = formItem;\n        if (rulerValue === undefined || condition === undefined) {\n          console.warn(\n            'Something went wrong in shouldRenderControl: Ruler value or condition could not be found.'\n          );\n          return false;\n        }\n        if (\n          typeof rulerValue === 'string' &&\n          rulerValue === (condition as any)\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          condition &&\n          typeof condition === 'object' &&\n          Array.isArray(condition)\n        ) {\n          for (const conditionItem of condition as Array<any>) {\n            if (conditionItem) {\n              if (typeof rulerValue === 'object' && Array.isArray(rulerValue)) {\n                for (const rulerValueItem of rulerValue as Array<any>) {\n                  if (\n                    rulerValueItem &&\n                    rulerValueItem.value === conditionItem.value\n                  ) {\n                    return this.shouldRenderControl(key, ruler.formItem, index);\n                  }\n                }\n              } else if (\n                typeof rulerValue === 'object' &&\n                !Array.isArray(rulerValue)\n              ) {\n                if (rulerValue && rulerValue.value === conditionItem.value) {\n                  return this.shouldRenderControl(key, ruler.formItem, index);\n                }\n              }\n            }\n          }\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'object' &&\n          !Array.isArray(rulerValue) &&\n          rulerValue.value === (condition as DynamicFormOption).value\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'boolean' &&\n          rulerValue === condition\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        }\n        return false;\n      }\n    return true;\n  }\n\n  /**\n   * ADD NEW ITEM TO FORM ARRAY WITH ID:\n   * Duplicates the whole section or a form item within a section\n   * @param key section key\n   * @param id the id of the form item which should be duplicated\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  addNewItemToFormArrayWithId(\n    key: string,\n    id?: string,\n    sectionIndex?: number\n  ): void {\n    if (id) {\n      // There is an id which means we want to duplicate a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to duplicate should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(id) as ExtendedFormArray).push(new FormControl(''));\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup.get(key).get(id) as ExtendedFormArray).push(\n          new FormControl('')\n        );\n      }\n    } else {\n      // There is no id which means we want to duplicate the entire section\n      const target: ExtendedFormGroupArray = this.extendedFormGroup.get(\n        key\n      ) as ExtendedFormGroupArray;\n      const childControls: ExtendedFormGroupControls = this.formService.dynamicFormItemsToControls(\n        target.sectionItem.items\n      );\n      const formGroup: ExtendedFormGroup = new ExtendedFormGroup(\n        childControls,\n        target.sectionItem\n      );\n      target.push(formGroup);\n    }\n  }\n\n  /**\n   * REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\n   * Removes the whole section or a form item within a section\n   * @param key section key\n   * @param info the id of the form item which should be removed and the index of where to remove it\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  removeItemAtIndexFromFormArrayWithId(\n    key: string,\n    info?: { id: string; index: number },\n    sectionIndex?: number\n  ): void {\n    if (info && info.id) {\n      // There is info which means we want to remove a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to remove should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(info.id) as ExtendedFormArray).removeAt(info.index);\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup\n          .get(key)\n          .get(info.id) as ExtendedFormArray).removeAt(info.index);\n      }\n    } else {\n      // there is no info indicating we should use the section index to remove the section itself\n      if (sectionIndex > -1) {\n        (this.extendedFormGroup.get(key) as ExtendedFormGroupArray).removeAt(\n          sectionIndex\n        );\n      } else {\n        console.warn(\n          'Error at removeItemAtIndexFromFormArrayWithId: Tried to remove section but no section index was provided'\n        );\n      }\n    }\n  }\n\n  removeItemFromParent(param: {\n    form: ExtendedFormControl;\n    index: number;\n  }): void {\n    const { form, index } = param;\n    (form.formGroup as ExtendedFormGroupArray).removeAt(index);\n    // reset parent control if the formGroup property doesn't have controls\n    if (!(form.formGroup as ExtendedFormGroupArray).controls?.length) {\n      form.reset();\n    }\n    this.followUpModalToggle = false;\n  }\n\n  editItemFromParent(param: {\n    formArray: ExtendedFormArray;\n    index: number;\n  }): void {\n    const { formArray, index } = param;\n    this.newFormGroup = {\n      form: new ExtendedFormGroup(\n        (formArray.at(index) as ExtendedFormGroup)\n          .controls as ExtendedFormGroupControls\n      ),\n      index,\n    };\n    this.followUpModalToggle = true;\n  }\n\n  orderForm = (\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\n  ): number => {\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\n      return (\n        (a.value as ExtendedFormGroup).sectionItem.order -\n        (b.value as ExtendedFormGroup).sectionItem.order\n      );\n    } else if (a.value['formItem'] && b.value['formItem']) {\n      return (\n        (a.value as ExtendedFormControl).formItem.order -\n        (b.value as ExtendedFormControl).formItem.order\n      );\n    }\n    return 0;\n  };\n\n  getFormArrayControls(\n    control: ExtendedFormGroupArray\n  ): Array<ExtendedFormGroup> {\n    if (control instanceof ExtendedFormGroupArray) {\n      return control.controls as Array<ExtendedFormGroup>;\n    } else {\n      console.warn(\n        'Error in getFormArrayControls: control is not an instance of ExtendedFormGroupArray'\n      );\n      return [];\n    }\n  }\n\n  controlValueChanged(): void {\n    this.submitted &&= false;\n  }\n\n  get sectionList() {\n    if (this.activeStep !== null) {\n      return [\n        this.extendedFormGroup.controls[\n          Object.keys(this.extendedFormGroup.controls)[this.activeStep]\n        ],\n      ];\n    } else {\n      return this.extendedFormGroup.controls;\n    }\n  }\n\n  validate(): void {\n    console.log(this.extendedFormGroup);\n  }\n\n  cancel(): void {\n    this.cancelEvent.emit();\n  }\n\n  next(): void {\n    this.submitted = true;\n    if (this.formService.validateForm(this.sectionList[0])) {\n      this.nextEvent?.emit();\n      this.submitted = false;\n    }\n  }\n\n  previous(): void {\n    this.previousEvent.emit();\n  }\n}\n",
            "properties": [
                {
                    "name": "hasAction",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Media",
            "id": "interface-Media-41ef39e74feaf1ab456d0d702c9101b2",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from \"./dynamicFormType\";\nimport { DynamicFormOption } from \"./dynamicFormOption\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport enum RuleType {\n    required,\n    min,\n    max,\n    minLength,\n    maxLength,\n    pattern,\n    minThanReference,\n    minThanEqualsReference,\n    maxThanReference,\n    maxThanEqualReference,\n    confirm,\n}\n\nexport enum MediaKind {\n    Image,\n    Video,\n}\n\nexport interface formItemValidation {\n    required?: boolean;\n    min?: number | string;\n    max?: number | string;\n    minLength?: number | string;\n    maxLength?: number | string;\n}\n\nexport interface Rule {\n    value?: any;\n    message?: string;\n    type: RuleType;\n}\n\nexport interface Media {\n    id: string;\n    url: string;\n    kind: MediaKind;\n    mimeType: string;\n    name: string;\n    description: string;\n}\n\nexport interface DynamicFormItem {\n    key: string | null;\n    category?: string | null; //subTitle\n    title?: string | null; //name\n    value?: any;\n    label?: string | null;\n    descriptionHeader?: string | null; //text\n    description?: string | null;\n    media?: Media[];\n    className?: string | null;\n    multi?: boolean;\n    order?: number;\n    placeholder?: string | null;\n    options?: Array<DynamicFormOption> | null;\n    rulerKey?: string | null;\n    condition?: any;\n    controlType: DynamicFormType;\n    rules?: Rule[];\n    controlMetaData?: {\n        label?: string;\n        description?: string;\n        inputGroupLabel?: string;\n        inputGroupPosition?: \"left\" | \"right\";\n    };\n}\n\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n];\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "kind",
                    "type": "MediaKind",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "mimeType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Rule",
            "id": "interface-Rule-41ef39e74feaf1ab456d0d702c9101b2",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from \"./dynamicFormType\";\nimport { DynamicFormOption } from \"./dynamicFormOption\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport enum RuleType {\n    required,\n    min,\n    max,\n    minLength,\n    maxLength,\n    pattern,\n    minThanReference,\n    minThanEqualsReference,\n    maxThanReference,\n    maxThanEqualReference,\n    confirm,\n}\n\nexport enum MediaKind {\n    Image,\n    Video,\n}\n\nexport interface formItemValidation {\n    required?: boolean;\n    min?: number | string;\n    max?: number | string;\n    minLength?: number | string;\n    maxLength?: number | string;\n}\n\nexport interface Rule {\n    value?: any;\n    message?: string;\n    type: RuleType;\n}\n\nexport interface Media {\n    id: string;\n    url: string;\n    kind: MediaKind;\n    mimeType: string;\n    name: string;\n    description: string;\n}\n\nexport interface DynamicFormItem {\n    key: string | null;\n    category?: string | null; //subTitle\n    title?: string | null; //name\n    value?: any;\n    label?: string | null;\n    descriptionHeader?: string | null; //text\n    description?: string | null;\n    media?: Media[];\n    className?: string | null;\n    multi?: boolean;\n    order?: number;\n    placeholder?: string | null;\n    options?: Array<DynamicFormOption> | null;\n    rulerKey?: string | null;\n    condition?: any;\n    controlType: DynamicFormType;\n    rules?: Rule[];\n    controlMetaData?: {\n        label?: string;\n        description?: string;\n        inputGroupLabel?: string;\n        inputGroupPosition?: \"left\" | \"right\";\n    };\n}\n\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n];\n",
            "properties": [
                {
                    "name": "message",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "type",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "FormService",
            "id": "injectable-FormService-47d665dac2b2d16a47a2add47049b2fd",
            "file": "projects/dynamic-form/src/lib/form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "appendValidations",
                    "args": [
                        {
                            "name": "control",
                            "type": "ExtendedFormGroupControl"
                        },
                        {
                            "name": "rule",
                            "type": "Rule"
                        },
                        {
                            "name": "referenceControl",
                            "type": "ExtendedFormGroupControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "ExtendedFormGroupControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rule",
                            "type": "Rule",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "referenceControl",
                            "type": "ExtendedFormGroupControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormItemsToArrayFormGroup",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>"
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupArray",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormItemsToControls",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>"
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupControls",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormItemsToFormGroup",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>"
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroup",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormSectionsToFormGroup",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormSection>"
                        },
                        {
                            "name": "original",
                            "type": "ExtendedFormGroup",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "literal type",
                            "defaultValue": "{ keepForwardHistory: true }"
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroup",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormSection>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "original",
                            "type": "ExtendedFormGroup",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "literal type",
                            "defaultValue": "{ keepForwardHistory: true }",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findNestedControl",
                    "args": [
                        {
                            "name": "forms",
                            "type": "ExtendedFormGroup | ExtendedFormGroup[]"
                        },
                        {
                            "name": "controlKey",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupControl",
                    "typeParameters": [],
                    "line": 306,
                    "jsdoctags": [
                        {
                            "name": "forms",
                            "type": "ExtendedFormGroup | ExtendedFormGroup[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formToDynamicFormResponseItems",
                    "args": [
                        {
                            "name": "data",
                            "type": "KeyValue<string | any> | Array<KeyValue<string, any>>"
                        },
                        {
                            "name": "formGroup",
                            "type": "ExtendedFormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<DynamicFormResponseItem>",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "KeyValue<string | any> | Array<KeyValue<string, any>>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formGroup",
                            "type": "ExtendedFormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateControlValidator",
                    "args": [
                        {
                            "name": "validators",
                            "type": "formItemValidation"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 254,
                    "jsdoctags": [
                        {
                            "name": "validators",
                            "type": "formItemValidation",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateValidations",
                    "args": [
                        {
                            "name": "rules",
                            "type": "Rule[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 178,
                    "jsdoctags": [
                        {
                            "name": "rules",
                            "type": "Rule[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNestedFormInvalid",
                    "args": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 283,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 371,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormControl, ValidatorFn, Validators } from '@angular/forms';\nimport {\n  DynamicFormItem,\n  DynamicFormSection,\n  DynamicFormResponseItem,\n  DynamicFormType,\n  formItemValidation,\n  Rule,\n  RuleType,\n} from './model/models';\nimport {\n  ExtendedFormGroup,\n  ExtendedFormGroupControls,\n  ExtendedFormGroupControl,\n} from './model/custom-classes/extended-form-group';\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\nimport { KeyValue } from '@angular/common';\n\n@Injectable()\nexport class FormService {\n  constructor() {}\n\n  dynamicFormSectionsToFormGroup(\n    items: Array<DynamicFormSection>,\n    original?: ExtendedFormGroup,\n    config: { keepForwardHistory: boolean } = { keepForwardHistory: true }\n  ): ExtendedFormGroup {\n    const controls: ExtendedFormGroupControls = {};\n    const orderedItems = items.sort(\n      (a: DynamicFormSection, b: DynamicFormSection) => a.order - b.order\n    );\n    const existingKeys: boolean =\n      config.keepForwardHistory &&\n      original &&\n      orderedItems.every((item) => {\n        return original.get(item.key);\n      });\n    if (existingKeys) {\n      return original;\n    }\n    orderedItems.forEach((item: DynamicFormSection) => {\n      if (!!item.multi) {\n        const childControls: ExtendedFormGroupControls = this.dynamicFormItemsToControls(\n          item.items\n        );\n        const formGroup: ExtendedFormGroup = new ExtendedFormGroup(\n          childControls,\n          item\n        );\n        const controlsArray: ExtendedFormGroup[] = [formGroup];\n        controls[item.key] = new ExtendedFormGroupArray(controlsArray, item);\n      } else {\n        const childControls: ExtendedFormGroupControls = this.dynamicFormItemsToControls(\n          item.items\n        );\n        controls[item.key] = new ExtendedFormGroup(childControls, item);\n        if (original) {\n          original.controls[item.key] = new ExtendedFormGroup(\n            childControls,\n            item\n          );\n        }\n      }\n    });\n    if (original) {\n      return original;\n    }\n    return new ExtendedFormGroup(controls);\n  }\n\n  dynamicFormItemsToControls(\n    items: Array<DynamicFormItem>\n  ): ExtendedFormGroupControls {\n    const controls: ExtendedFormGroupControls = {};\n    const orderedItems: Array<DynamicFormItem> = items?.sort(\n      (a: DynamicFormItem, b: DynamicFormItem) => a.order - b.order\n    );\n\n    orderedItems?.forEach((item: DynamicFormItem) => {\n      if (item.controlType === DynamicFormType.Text && item.multi) {\n        const controlsArray: FormControl[] = item.value\n          ? (item.value as Array<string>).map(\n              (val: string) => new FormControl(val)\n            )\n          : [new FormControl('')];\n        controls[item.key] = new ExtendedFormArray(item, controlsArray);\n      } else {\n        controls[item.key] = new ExtendedFormControl(\n          item,\n          item.value,\n          this.generateControlValidator(this.generateValidations(item.rules))\n        );\n      }\n    });\n    return controls;\n  }\n\n  dynamicFormItemsToFormGroup(\n    items: Array<DynamicFormItem>\n  ): ExtendedFormGroup {\n    const controls: ExtendedFormGroupControls = this.dynamicFormItemsToControls(\n      items\n    );\n    return new ExtendedFormGroup(controls);\n  }\n\n  dynamicFormItemsToArrayFormGroup(\n    items: Array<DynamicFormItem>\n  ): ExtendedFormGroupArray {\n    const formGroup: ExtendedFormGroup = this.dynamicFormItemsToFormGroup(\n      items\n    );\n    return new ExtendedFormGroupArray([formGroup]);\n  }\n\n  formToDynamicFormResponseItems(\n    data: KeyValue<string, any> | Array<KeyValue<string, any>>,\n    formGroup: ExtendedFormGroup\n  ): Array<DynamicFormResponseItem> {\n    const dynamicFormSubmitValues: Array<DynamicFormResponseItem> = [];\n\n    for (const section of Object.keys(data)) {\n      const targetSection: ExtendedFormGroupControl = formGroup.get(section);\n      if (targetSection) {\n        if (targetSection instanceof ExtendedFormGroupArray) {\n          (targetSection as ExtendedFormGroupArray).controls.map(\n            (item: ExtendedFormGroup, sectionIndex: number) => {\n              for (const key of Object.keys(data[section][sectionIndex])) {\n                const target: ExtendedFormControl | ExtendedFormArray =\n                  (item.get(key) as ExtendedFormControl | ExtendedFormArray) ||\n                  null;\n                if (target) {\n                  const {\n                    value,\n                    formItem,\n                  }: ExtendedFormControl | ExtendedFormArray = target;\n                  dynamicFormSubmitValues.push({\n                    key,\n                    formItem,\n                    value,\n                    sectionId: section,\n                    sectionIndex,\n                  });\n                }\n              }\n            }\n          );\n        } else {\n          for (const key of Object.keys(data[section])) {\n            const target: ExtendedFormControl | ExtendedFormArray =\n              (targetSection.get(key) as\n                | ExtendedFormControl\n                | ExtendedFormArray) || null;\n            if (target) {\n              const {\n                value,\n                formItem,\n              }: ExtendedFormControl | ExtendedFormArray = target;\n              dynamicFormSubmitValues.push({\n                key,\n                formItem,\n                value,\n                sectionId: section,\n                sectionIndex: 0,\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return dynamicFormSubmitValues;\n  }\n\n  generateValidations(rules: Rule[]): { [key: string]: any } {\n    let validations: { [key: string]: any } = {};\n    rules\n      ?.sort((a: Rule, b: Rule) => a.type - b.type)\n      .forEach((rule: Rule) => {\n        switch (rule.type) {\n          case RuleType.required:\n            validations = { ...validations, ...{ required: true } };\n            break;\n          case RuleType.min:\n            validations = { ...validations, ...{ min: rule.value } };\n            break;\n          case RuleType.max:\n            validations = { ...validations, ...{ max: rule.value } };\n            break;\n          case RuleType.maxLength:\n            validations = { ...validations, ...{ maxLength: rule.value } };\n            break;\n          case RuleType.minLength:\n            validations = { ...validations, ...{ minLength: rule.value } };\n            break;\n          case RuleType.pattern:\n            validations = { ...validations, ...{ pattern: rule.value } };\n            break;\n          case RuleType.minThanEqualsReference:\n            validations = { ...validations, ...{ min: rule.value } };\n            break;\n          case RuleType.minThanReference:\n            validations = { ...validations, ...{ min: rule.value } };\n            break;\n          case RuleType.maxThanReference:\n            validations = { ...validations, ...{ max: rule.value } };\n            break;\n          case RuleType.maxThanEqualReference:\n            validations = { ...validations, ...{ max: rule.value } };\n            break;\n          default:\n            break;\n        }\n      });\n    return validations;\n  }\n\n  appendValidations(\n    control: ExtendedFormGroupControl,\n    rule: Rule,\n    referenceControl: ExtendedFormGroupControl\n  ): void {\n    let customRule: Rule;\n    switch (rule.type) {\n      case RuleType.maxThanReference:\n        customRule = {\n          ...rule,\n          ...{ value: Number(referenceControl.value) - 1 },\n        };\n        break;\n      case RuleType.maxThanEqualReference:\n        customRule = { ...rule, ...{ value: referenceControl.value } };\n        break;\n      case RuleType.minThanReference:\n        customRule = {\n          ...rule,\n          ...{ value: Number(referenceControl.value) + 1 },\n        };\n        break;\n      case RuleType.minThanEqualsReference:\n        customRule = { ...rule, ...{ value: referenceControl.value } };\n        break;\n      default:\n        break;\n    }\n    control.setValidators(\n      this.generateControlValidator(this.generateValidations([customRule]))\n    );\n  }\n\n  generateControlValidator(validators: formItemValidation): ValidatorFn[] {\n    const validations: ValidatorFn[] = [];\n    Object.keys(validators).forEach((validator: string) => {\n      switch (validator) {\n        case 'min':\n          validations.push(Validators.min(Number(validators[validator])));\n          break;\n        case 'max':\n          validations.push(Validators.max(Number(validators[validator])));\n          break;\n        case 'minLength':\n          validations.push(Validators.minLength(Number(validators[validator])));\n          break;\n        case 'maxLength':\n          validations.push(Validators.maxLength(Number(validators[validator])));\n          break;\n        case 'required':\n          validators.required && validations.push(Validators.required);\n          break;\n        case 'pattern':\n          validations.push(Validators.pattern(validators[validator]));\n          break;\n        default:\n          break;\n      }\n    });\n    return validations;\n  }\n\n  isNestedFormInvalid(form: ExtendedFormGroup): boolean {\n    return Object.keys(form.controls).some((key: string) => {\n      // const formControl: ExtendedFormGroup = form.controls[\n      //   key\n      // ] as ExtendedFormGroup;\n\n      // return Object.keys(formControl.controls).some(\n      //   (childControlKey: string) => {\n      if (form.controls[key]?.valid) {\n        const formGroup: ExtendedFormGroup = (form.controls[\n          key\n        ] as ExtendedFormControl)?.formGroup as ExtendedFormGroup;\n        if (formGroup && !formGroup.valid) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n      //   }\n      // );\n    });\n  }\n\n  findNestedControl(\n    forms: ExtendedFormGroup | ExtendedFormGroup[],\n    controlKey: string\n  ): ExtendedFormGroupControl {\n    let existingControl: ExtendedFormGroupControl;\n\n    if (Array.isArray(forms)) {\n      forms.some((form: ExtendedFormGroup) => {\n        this.findNestedControl(form, controlKey);\n      });\n    } else {\n      if (forms.controls[controlKey]) {\n        existingControl = forms.controls[\n          controlKey\n        ] as ExtendedFormGroupControl;\n      } else {\n        Object.keys(forms.controls).forEach((key: string) => {\n          if ((forms.controls[key] as ExtendedFormGroup).controls) {\n            if (\n              (forms.controls[key] as ExtendedFormGroup).controls[controlKey]\n            ) {\n              existingControl = (forms.controls[key] as ExtendedFormGroup)\n                .controls[controlKey] as ExtendedFormGroupControl;\n            } else {\n              Object.keys(\n                (forms.controls[key] as ExtendedFormGroup).controls\n              ).forEach((control: string) => {\n                (forms.controls[key] as ExtendedFormGroup).controls[control];\n                if (\n                  ((forms.controls[key] as ExtendedFormGroup).controls[\n                    control\n                  ] as ExtendedFormControl).formGroup\n                ) {\n                  if (\n                    ((forms.controls[key] as ExtendedFormGroup).controls[\n                      control\n                    ] as ExtendedFormControl).formGroup.controls[controlKey]\n                  ) {\n                    existingControl = ((forms.controls[\n                      key\n                    ] as ExtendedFormGroup).controls[\n                      control\n                    ] as ExtendedFormControl).formGroup.controls[controlKey];\n                  }\n                }\n              });\n            }\n          }\n          if ((forms.controls[key] as ExtendedFormControl).formGroup) {\n            if (\n              (forms.controls[key] as ExtendedFormControl).formGroup.controls[\n                controlKey\n              ]\n            ) {\n              existingControl = (forms.controls[key] as ExtendedFormControl)\n                .formGroup.controls[controlKey];\n            }\n          }\n        });\n      }\n    }\n\n    return existingControl;\n  }\n\n  validateForm(form: ExtendedFormGroup): boolean {\n    form.updateValueAndValidity();\n    if (!form.valid) {\n      return form.valid;\n    }\n    return !this.isNestedFormInvalid(form);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "ExtendedFormArray",
            "id": "class-ExtendedFormArray-dc963a8d43955bc6f03c5c6e74e129c6",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-array.ts",
            "type": "class",
            "sourceCode": "import { FormArray, FormControl } from \"@angular/forms\";\nimport { DynamicFormItem } from \"../../model/dynamicFormItem\";\n\nexport class ExtendedFormArray extends FormArray {\n    formItem: DynamicFormItem;\n\n    constructor(formItem: DynamicFormItem, controls: Array<FormControl>) {\n        super(controls);\n        this.formItem = formItem;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem"
                    },
                    {
                        "name": "controls",
                        "type": "Array<FormControl>"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controls",
                        "type": "Array<FormControl>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formItem",
                    "type": "DynamicFormItem",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormArray",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExtendedFormControl",
            "id": "class-ExtendedFormControl-7b1fa64bb34754455848b971b493be12",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-control.ts",
            "type": "class",
            "sourceCode": "import { FormControl, AsyncValidatorFn, ValidatorFn } from \"@angular/forms\";\nimport { DynamicFormItem } from \"../../model/dynamicFormItem\";\nimport { ExtendedFormGroup } from \"./extended-form-group\";\nimport { ExtendedFormGroupArray } from \"./extended-form-group-array\";\n\nexport class ExtendedFormControl extends FormControl {\n    formItem: DynamicFormItem;\n    options: DynamicFormItem[\"options\"] = [];\n    formGroup: ExtendedFormGroup | ExtendedFormGroupArray;\n\n    constructor(\n        formItem: DynamicFormItem,\n        value: any,\n        validator?: ValidatorFn | ValidatorFn[] | AsyncValidatorFn | AsyncValidatorFn[] | null\n    ) {\n        super(value, validator);\n        this.formItem = formItem;\n        this.options = formItem.options ? formItem.options : null;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem"
                    },
                    {
                        "name": "value",
                        "type": "any"
                    },
                    {
                        "name": "validator",
                        "type": "ValidatorFn | ValidatorFn[] | AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validator",
                        "type": "ValidatorFn | ValidatorFn[] | AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formGroup",
                    "type": "ExtendedFormGroup | ExtendedFormGroupArray",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "formItem",
                    "type": "DynamicFormItem",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormControl",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExtendedFormGroup",
            "id": "class-ExtendedFormGroup-a2f80beccb3c3d59794888f4d46989b3",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
            "type": "class",
            "sourceCode": "import { FormGroup, ValidatorFn, AbstractControlOptions, AsyncValidatorFn } from \"@angular/forms\";\nimport { DynamicFormSection } from \"../../model/dynamicFormSection\";\nimport { ExtendedFormControl } from \"./extended-form-control\";\nimport { ExtendedFormArray } from \"./extended-form-array\";\nimport { ExtendedFormGroupArray } from \"./extended-form-group-array\";\nexport interface ExtendedFormGroupControls {\n    [key: string]: ExtendedFormGroupControl | ExtendedFormGroup;\n}\n\nexport type ExtendedFormGroupControl = ExtendedFormControl | ExtendedFormArray | ExtendedFormGroup | ExtendedFormGroupArray;\n\nexport class ExtendedFormGroup extends FormGroup {\n    sectionItem: DynamicFormSection;\n\n    constructor(\n        controls: ExtendedFormGroupControls,\n        item?: DynamicFormSection,\n        validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions,\n        asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n    ) {\n        super(controls, validatorOrOpts, asyncValidator);\n        this.sectionItem = item;\n    }\n\n    get(path: string | (string | number)[]): ExtendedFormGroupControl {\n        return super.get(path) as ExtendedFormGroupControl;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "controls",
                        "type": "ExtendedFormGroupControls"
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "optional": true
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions",
                        "optional": true
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[]",
                        "optional": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "controls",
                        "type": "ExtendedFormGroupControls",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[]",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "sectionItem",
                    "type": "DynamicFormSection",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "path",
                            "type": "string | (string | number)[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupControl",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string | (string | number)[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExtendedFormGroupArray",
            "id": "class-ExtendedFormGroupArray-14a597fe1cad5dd75e1cf14d0f0622a2",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group-array.ts",
            "type": "class",
            "sourceCode": "import { FormArray } from \"@angular/forms\";\nimport { DynamicFormSection } from \"../../model/dynamicFormSection\";\nimport { ExtendedFormGroup } from \"./extended-form-group\";\n\nexport class ExtendedFormGroupArray extends FormArray {\n    sectionItem: DynamicFormSection;\n\n    constructor(controls: Array<ExtendedFormGroup>, item?: DynamicFormSection) {\n        super(controls);\n        this.sectionItem = item;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "controls",
                        "type": "Array<ExtendedFormGroup>"
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "controls",
                        "type": "Array<ExtendedFormGroup>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "sectionItem",
                    "type": "DynamicFormSection",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormArray",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "DigitOnlyDirective",
            "id": "directive-DigitOnlyDirective-987a545876aca56dcaffc3cba2fda4c3",
            "file": "projects/dynamic-form/src/lib/digit-only/digit-only.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, HostListener, NgModule, AfterViewInit, Input, AfterViewChecked, ChangeDetectorRef } from \"@angular/core\";\nimport { formatNumber } from \"@angular/common\";\nimport { ExtendedFormControl } from \"../model/custom-classes/extended-form-control\";\n\n@Directive({\n    selector: \"[digitsOnly]\",\n})\nexport class DigitOnlyDirective implements AfterViewInit, AfterViewChecked {\n    inputElement: HTMLInputElement;\n    element: ElementRef;\n    @Input() formControl: ExtendedFormControl;\n\n    constructor(public el: ElementRef, private cd: ChangeDetectorRef) {\n        this.element = el;\n    }\n\n    ngAfterViewInit(): void {\n        this.inputElement = this.element.nativeElement.querySelector(\"input\");\n    }\n\n    ngAfterViewChecked(): void {\n        const { formattedValue } = this.formatValue();\n        this.inputElement.value = formattedValue;\n    }\n\n    @HostListener(\"input\", [\"$event\"])\n    onInputChange(event: Event) {\n        const { initialValue, value, formattedValue } = this.formatValue();\n        if (initialValue !== this.inputElement.value) {\n            event?.stopPropagation();\n        }\n        this.formControl.patchValue(value);\n        this.inputElement.value = formattedValue;\n        this.cd.detectChanges();\n    }\n\n    formatValue(): { initialValue: string; value: string; formattedValue: string } {\n        const initialValue: string = this.inputElement.value;\n        const value: string = initialValue\n            .split(/[.,]/)[0]\n            .replace(/[^0-9]*/g, \"\")\n            .replace(/^0+(?!\\.|$)/, \"\");\n        const formattedValue: string = value ? formatNumber(Number(value), \"se\") : value;\n        return {\n            initialValue,\n            value,\n            formattedValue,\n        };\n    }\n}\n\n@NgModule({\n    declarations: [DigitOnlyDirective],\n    exports: [DigitOnlyDirective],\n})\nexport class DigitOnlyModule {}\n",
            "selector": "[digitsOnly]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "formControl",
                    "line": 11,
                    "type": "ExtendedFormControl"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "input",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 27
                }
            ],
            "propertiesClass": [
                {
                    "name": "el",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "inputElement",
                    "type": "HTMLInputElement",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "formatValue",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "implements": [
                "AfterViewInit",
                "AfterViewChecked"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "DemoComponent",
            "id": "component-DemoComponent-471ccafe839c9089030a60f8d09a1915",
            "file": "stories/demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-dynamic-form",
            "styleUrls": [
                "./demo.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeStep",
                    "line": 41,
                    "type": "number"
                },
                {
                    "name": "cancelAction",
                    "defaultValue": "{ hasAction: false }",
                    "line": 56,
                    "type": "IFormAction"
                },
                {
                    "name": "formSection",
                    "line": 44,
                    "type": "DynamicFormSection[]"
                },
                {
                    "name": "hasFormActions",
                    "line": 47,
                    "type": "boolean"
                },
                {
                    "name": "nextAction",
                    "defaultValue": "{ hasAction: false }",
                    "line": 50,
                    "type": "IFormAction"
                },
                {
                    "name": "previousAction",
                    "defaultValue": "{ hasAction: false }",
                    "line": 53,
                    "type": "IFormAction"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "extendedFormGroup",
                    "type": "ExtendedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "goToNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "gotToPreviousStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  DynamicFormSection,\n  FormService,\n  ExtendedFormGroup,\n} from 'dynamic-form';\nimport { IFormAction } from 'projects/dynamic-form/src/lib';\n\n@Component({\n  selector: 'storybook-dynamic-form',\n  templateUrl: './demo.component.html',\n  styleUrls: ['./demo.scss'],\n})\nexport class DemoComponent implements OnInit, OnChanges {\n  extendedFormGroup: ExtendedFormGroup;\n  constructor(private formService: FormService) {}\n\n  ngOnInit(): void {\n    this.extendedFormGroup = this.formService.dynamicFormSectionsToFormGroup([\n      this.formSection[this.activeStep],\n    ]);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // if (changes.formSection.currentValue) {\n    //   this.extendedFormGroup = this.formService.dynamicFormSectionsToFormGroup(\n    //     this.formSection\n    //   );\n    // }\n  }\n\n  @Input()\n  activeStep: number;\n\n  @Input()\n  formSection: DynamicFormSection[];\n\n  @Input()\n  hasFormActions: boolean;\n\n  @Input()\n  nextAction: IFormAction = { hasAction: false };\n\n  @Input()\n  previousAction: IFormAction = { hasAction: false };\n\n  @Input()\n  cancelAction: IFormAction = { hasAction: false };\n\n  goToNextStep(): void {\n    this.activeStep += 1;\n    this.extendedFormGroup = this.formService.dynamicFormSectionsToFormGroup(\n      [this.formSection[this.activeStep]],\n      this.extendedFormGroup\n    );\n  }\n\n  gotToPreviousStep(): void {\n    console.log('previous', this.extendedFormGroup);\n    this.activeStep -= 1;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep {\n  @import \"~@sebgroup/bootstrap/scss/bootstrap\";\n}\n",
                    "styleUrl": "./demo.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"extendedFormGroup\">\n  <app-dynamic-form\n    [extendedFormGroup]=\"extendedFormGroup\"\n    [activeStep]=\"activeStep\"\n    [hasFormActions]=\"hasFormActions\"\n    [nextAction]=\"nextAction\"\n    [previousAction]=\"previousAction\"\n    [cancelAction]=\"cancelAction\"\n    [disclaimerTemplate]=\"disclaimerTmpl\"\n    [itemTemplate]=\"itemTmpl\"\n    (nextEvent)=\"goToNextStep()\"\n    (previousEvent)=\"gotToPreviousStep()\"\n  ></app-dynamic-form>\n</ng-container>\n<ng-template #disclaimerTmpl let-context=\"context\">\n  {{ context | json }}\n</ng-template>\n\n<ng-template #itemTmpl let-context=\"context\"> itemmm </ng-template>\n"
        },
        {
            "name": "DynamicFormComponent",
            "id": "component-DynamicFormComponent-707478081013a2af325b46ac52bfbfaa",
            "file": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "FormService"
                }
            ],
            "selector": "app-dynamic-form",
            "styleUrls": [],
            "styles": [
                "\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    "
            ],
            "templateUrl": [
                "./dynamic-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionsTemplate",
                    "line": 51,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "activeStep",
                    "line": 48,
                    "type": "number"
                },
                {
                    "name": "cancelAction",
                    "defaultValue": "{\n    hasAction: true,\n    label: 'Cancel',\n  }",
                    "line": 63,
                    "type": "IFormAction"
                },
                {
                    "name": "disclaimerTemplate",
                    "line": 52,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "extendedFormGroup",
                    "line": 47,
                    "type": "ExtendedFormGroup"
                },
                {
                    "name": "hasFormActions",
                    "defaultValue": "true",
                    "line": 54,
                    "type": "boolean"
                },
                {
                    "name": "itemCustomClass",
                    "line": 53,
                    "type": "string"
                },
                {
                    "name": "itemTemplate",
                    "line": 50,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "nextAction",
                    "defaultValue": "{\n    hasAction: true,\n    label: 'Next',\n  }",
                    "line": 55,
                    "type": "IFormAction"
                },
                {
                    "name": "previousAction",
                    "defaultValue": "{\n    hasAction: true,\n    label: 'Previous',\n  }",
                    "line": 59,
                    "type": "IFormAction"
                },
                {
                    "name": "sectionTemplate",
                    "line": 49,
                    "type": "TemplateRef<any>"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelEvent",
                    "defaultValue": "new EventEmitter()",
                    "line": 69,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "nextEvent",
                    "defaultValue": "new EventEmitter()",
                    "line": 68,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "previousEvent",
                    "defaultValue": "new EventEmitter()",
                    "line": 67,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "followUpModalToggle",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "newFormGroup",
                    "defaultValue": "{\n    form: null,\n    index: null,\n  }",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "orderForm",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 334
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewItemToFormArrayWithId",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "sectionIndex",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "description": "<p>ADD NEW ITEM TO FORM ARRAY WITH ID:\nDuplicates the whole section or a form item within a section</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6990,
                                "end": 6993,
                                "flags": 0,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 6984,
                                "end": 6989,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>section key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7018,
                                "end": 7020,
                                "flags": 0,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 7012,
                                "end": 7017,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the id of the form item which should be duplicated</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7084,
                                "end": 7096,
                                "flags": 0,
                                "escapedText": "sectionIndex"
                            },
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "pos": 7078,
                                "end": 7083,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>if the formgroup is an array this is the index of the formgroup item</p>\n"
                        }
                    ]
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 385
                },
                {
                    "name": "controlValueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 365
                },
                {
                    "name": "createFormGroup",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dimissFollowUpModal",
                    "args": [
                        {
                            "name": "item",
                            "type": "ExtendedFormControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ExtendedFormControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editItemFromParent",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 319,
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormArrayControls",
                    "args": [
                        {
                            "name": "control",
                            "type": "ExtendedFormGroupArray"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<ExtendedFormGroup>",
                    "typeParameters": [],
                    "line": 352,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "ExtendedFormGroupArray",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modalShouldBeRendered",
                    "args": [
                        {
                            "name": "control",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 389
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397
                },
                {
                    "name": "removeItemAtIndexFromFormArrayWithId",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "info",
                            "type": "literal type",
                            "optional": true
                        },
                        {
                            "name": "sectionIndex",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "description": "<p>REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\nRemoves the whole section or a form item within a section</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8584,
                                "end": 8587,
                                "flags": 0,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 8578,
                                "end": 8583,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>section key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8612,
                                "end": 8616,
                                "flags": 0,
                                "escapedText": "info"
                            },
                            "type": "literal type",
                            "optional": true,
                            "tagName": {
                                "pos": 8606,
                                "end": 8611,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the id of the form item which should be removed and the index of where to remove it</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8713,
                                "end": 8725,
                                "flags": 0,
                                "escapedText": "sectionIndex"
                            },
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "pos": 8707,
                                "end": 8712,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>if the formgroup is an array this is the index of the formgroup item</p>\n"
                        }
                    ]
                },
                {
                    "name": "removeItemFromParent",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 306,
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveFollowUpModal",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldRenderControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "formItem",
                            "type": "DynamicFormItem"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>SHOULD RENDER CONTROL:\nDetermines if the form control should be rendered or not.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3665,
                                "end": 3668,
                                "flags": 0,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 3659,
                                "end": 3664,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>section key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3693,
                                "end": 3701,
                                "flags": 0,
                                "escapedText": "formItem"
                            },
                            "type": "DynamicFormItem",
                            "tagName": {
                                "pos": 3687,
                                "end": 3692,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the target form item that should or should not be displayed</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3774,
                                "end": 3779,
                                "flags": 0,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "pos": 3768,
                                "end": 3773,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>if the formgroup is an array this is the index of the formgroup item</p>\n"
                        }
                    ]
                },
                {
                    "name": "shouldRenderFollowUpControlsType",
                    "args": [
                        {
                            "name": "key",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 381
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>some comment </p>\n",
            "rawdescription": "some comment ",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { KeyValue } from '@angular/common';\nimport { DynamicFormItem, DynamicFormOption } from './model/models';\nimport {\n  ExtendedFormGroup,\n  ExtendedFormGroupControls,\n} from './model/custom-classes/extended-form-group';\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\nimport { FormService } from './form.service';\n\ninterface IDynamicFormValidationError {\n  key: string;\n  errorMessage: string;\n  sectionId: string;\n  sectionIndex: number;\n  formItem: Partial<DynamicFormItem>;\n}\n\nexport interface IFormAction {\n  hasAction: boolean;\n  label?: string;\n}\n/** some comment */\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [FormService],\n  styles: [\n    `\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    `,\n  ],\n})\nexport class DynamicFormComponent {\n  @Input() extendedFormGroup: ExtendedFormGroup;\n  @Input() activeStep: number;\n  @Input() sectionTemplate: TemplateRef<any>;\n  @Input() itemTemplate: TemplateRef<any>;\n  @Input() actionsTemplate: TemplateRef<any>;\n  @Input() disclaimerTemplate: TemplateRef<any>;\n  @Input() itemCustomClass: string;\n  @Input() hasFormActions: boolean = true;\n  @Input() nextAction: IFormAction = {\n    hasAction: true,\n    label: 'Next',\n  };\n  @Input() previousAction: IFormAction = {\n    hasAction: true,\n    label: 'Previous',\n  };\n  @Input() cancelAction: IFormAction = {\n    hasAction: true,\n    label: 'Cancel',\n  };\n  @Output() previousEvent: EventEmitter<any> = new EventEmitter();\n  @Output() nextEvent: EventEmitter<any> = new EventEmitter();\n  @Output() cancelEvent: EventEmitter<any> = new EventEmitter();\n\n  submitted: boolean = false;\n\n  newFormGroup: { form: ExtendedFormGroup; index: number } = {\n    form: null,\n    index: null,\n  };\n\n  followUpModalToggle: boolean = false;\n\n  constructor(\n    private formService: FormService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  shouldRenderFollowUpControlsType(key: any): string {\n    if (key.value?.followUpItems) {\n      return key.value?.followUpItems.type;\n    }\n  }\n\n  dimissFollowUpModal(item: ExtendedFormControl): void {\n    this.followUpModalToggle = false;\n    !item.formGroup && item?.reset();\n  }\n\n  saveFollowUpModal(param: {\n    item: ExtendedFormGroup;\n    control: ExtendedFormControl;\n  }): void {\n    const { item, control } = param;\n    if (item.valid) {\n      if (this.newFormGroup.index !== null) {\n        (control.formGroup as ExtendedFormGroupArray).setControl(\n          this.newFormGroup.index,\n          item\n        );\n      } else {\n        if (!control.formGroup?.controls?.length) {\n          control.formGroup = new ExtendedFormGroupArray([item]);\n        } else {\n          (control.formGroup as ExtendedFormGroupArray).push(item);\n        }\n      }\n      this.followUpModalToggle = false;\n      this.cd.detectChanges();\n    }\n  }\n\n  createFormGroup(item: any) {\n    this.newFormGroup = {\n      form: this.formService.dynamicFormItemsToFormGroup(item),\n      index: null,\n    };\n    this.followUpModalToggle = true;\n  }\n\n  modalShouldBeRendered(control): boolean {\n    if (control.value?.followUpItems) {\n      return !!this.newFormGroup.form;\n    }\n  }\n\n  /**\n   * SHOULD RENDER CONTROL:\n   * Determines if the form control should be rendered or not.\n   * @param key section key\n   * @param formItem the target form item that should or should not be displayed\n   * @param index if the formgroup is an array this is the index of the formgroup item\n   */\n  shouldRenderControl(\n    key: string,\n    formItem: DynamicFormItem,\n    index?: number\n  ): boolean {\n    if (this.extendedFormGroup.controls)\n      if (formItem?.rulerKey) {\n        // It has a ruler key, trying to find the ruler and it's value\n        let ruler: ExtendedFormControl;\n        if (index > -1) {\n          // the form control where the ruler should be is an array\n          const target: ExtendedFormControl = (this.extendedFormGroup.get(\n            key\n          ) as ExtendedFormGroupArray)\n            .at(index)\n            .get(formItem.rulerKey) as ExtendedFormControl;\n          if (target) {\n            ruler = target;\n          }\n        } else {\n          // no array index: the form control where the ruler should be is a regular form\n          ruler = this.extendedFormGroup\n            ?.get(key)\n            ?.get(formItem.rulerKey) as ExtendedFormControl;\n        }\n        const rulerValue: any = ruler.value;\n        const { condition }: DynamicFormItem = formItem;\n        if (rulerValue === undefined || condition === undefined) {\n          console.warn(\n            'Something went wrong in shouldRenderControl: Ruler value or condition could not be found.'\n          );\n          return false;\n        }\n        if (\n          typeof rulerValue === 'string' &&\n          rulerValue === (condition as any)\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          condition &&\n          typeof condition === 'object' &&\n          Array.isArray(condition)\n        ) {\n          for (const conditionItem of condition as Array<any>) {\n            if (conditionItem) {\n              if (typeof rulerValue === 'object' && Array.isArray(rulerValue)) {\n                for (const rulerValueItem of rulerValue as Array<any>) {\n                  if (\n                    rulerValueItem &&\n                    rulerValueItem.value === conditionItem.value\n                  ) {\n                    return this.shouldRenderControl(key, ruler.formItem, index);\n                  }\n                }\n              } else if (\n                typeof rulerValue === 'object' &&\n                !Array.isArray(rulerValue)\n              ) {\n                if (rulerValue && rulerValue.value === conditionItem.value) {\n                  return this.shouldRenderControl(key, ruler.formItem, index);\n                }\n              }\n            }\n          }\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'object' &&\n          !Array.isArray(rulerValue) &&\n          rulerValue.value === (condition as DynamicFormOption).value\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'boolean' &&\n          rulerValue === condition\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        }\n        return false;\n      }\n    return true;\n  }\n\n  /**\n   * ADD NEW ITEM TO FORM ARRAY WITH ID:\n   * Duplicates the whole section or a form item within a section\n   * @param key section key\n   * @param id the id of the form item which should be duplicated\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  addNewItemToFormArrayWithId(\n    key: string,\n    id?: string,\n    sectionIndex?: number\n  ): void {\n    if (id) {\n      // There is an id which means we want to duplicate a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to duplicate should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(id) as ExtendedFormArray).push(new FormControl(''));\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup.get(key).get(id) as ExtendedFormArray).push(\n          new FormControl('')\n        );\n      }\n    } else {\n      // There is no id which means we want to duplicate the entire section\n      const target: ExtendedFormGroupArray = this.extendedFormGroup.get(\n        key\n      ) as ExtendedFormGroupArray;\n      const childControls: ExtendedFormGroupControls = this.formService.dynamicFormItemsToControls(\n        target.sectionItem.items\n      );\n      const formGroup: ExtendedFormGroup = new ExtendedFormGroup(\n        childControls,\n        target.sectionItem\n      );\n      target.push(formGroup);\n    }\n  }\n\n  /**\n   * REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\n   * Removes the whole section or a form item within a section\n   * @param key section key\n   * @param info the id of the form item which should be removed and the index of where to remove it\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  removeItemAtIndexFromFormArrayWithId(\n    key: string,\n    info?: { id: string; index: number },\n    sectionIndex?: number\n  ): void {\n    if (info && info.id) {\n      // There is info which means we want to remove a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to remove should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(info.id) as ExtendedFormArray).removeAt(info.index);\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup\n          .get(key)\n          .get(info.id) as ExtendedFormArray).removeAt(info.index);\n      }\n    } else {\n      // there is no info indicating we should use the section index to remove the section itself\n      if (sectionIndex > -1) {\n        (this.extendedFormGroup.get(key) as ExtendedFormGroupArray).removeAt(\n          sectionIndex\n        );\n      } else {\n        console.warn(\n          'Error at removeItemAtIndexFromFormArrayWithId: Tried to remove section but no section index was provided'\n        );\n      }\n    }\n  }\n\n  removeItemFromParent(param: {\n    form: ExtendedFormControl;\n    index: number;\n  }): void {\n    const { form, index } = param;\n    (form.formGroup as ExtendedFormGroupArray).removeAt(index);\n    // reset parent control if the formGroup property doesn't have controls\n    if (!(form.formGroup as ExtendedFormGroupArray).controls?.length) {\n      form.reset();\n    }\n    this.followUpModalToggle = false;\n  }\n\n  editItemFromParent(param: {\n    formArray: ExtendedFormArray;\n    index: number;\n  }): void {\n    const { formArray, index } = param;\n    this.newFormGroup = {\n      form: new ExtendedFormGroup(\n        (formArray.at(index) as ExtendedFormGroup)\n          .controls as ExtendedFormGroupControls\n      ),\n      index,\n    };\n    this.followUpModalToggle = true;\n  }\n\n  orderForm = (\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\n  ): number => {\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\n      return (\n        (a.value as ExtendedFormGroup).sectionItem.order -\n        (b.value as ExtendedFormGroup).sectionItem.order\n      );\n    } else if (a.value['formItem'] && b.value['formItem']) {\n      return (\n        (a.value as ExtendedFormControl).formItem.order -\n        (b.value as ExtendedFormControl).formItem.order\n      );\n    }\n    return 0;\n  };\n\n  getFormArrayControls(\n    control: ExtendedFormGroupArray\n  ): Array<ExtendedFormGroup> {\n    if (control instanceof ExtendedFormGroupArray) {\n      return control.controls as Array<ExtendedFormGroup>;\n    } else {\n      console.warn(\n        'Error in getFormArrayControls: control is not an instance of ExtendedFormGroupArray'\n      );\n      return [];\n    }\n  }\n\n  controlValueChanged(): void {\n    this.submitted &&= false;\n  }\n\n  get sectionList() {\n    if (this.activeStep !== null) {\n      return [\n        this.extendedFormGroup.controls[\n          Object.keys(this.extendedFormGroup.controls)[this.activeStep]\n        ],\n      ];\n    } else {\n      return this.extendedFormGroup.controls;\n    }\n  }\n\n  validate(): void {\n    console.log(this.extendedFormGroup);\n  }\n\n  cancel(): void {\n    this.cancelEvent.emit();\n  }\n\n  next(): void {\n    this.submitted = true;\n    if (this.formService.validateForm(this.sectionList[0])) {\n      this.nextEvent?.emit();\n      this.submitted = false;\n    }\n  }\n\n  previous(): void {\n    this.previousEvent.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "sectionList": {
                    "name": "sectionList",
                    "getSignature": {
                        "name": "sectionList",
                        "type": "",
                        "returnType": "",
                        "line": 369
                    }
                }
            },
            "templateData": "<form\n  *ngIf=\"extendedFormGroup\"\n  #ngForm=\"ngForm\"\n  [formGroup]=\"extendedFormGroup\"\n>\n  <div\n    class=\"dynamic-form-section-item\"\n    *ngFor=\"let section of sectionList | keyvalue: orderForm\"\n  >\n    <ng-container\n      [ngTemplateOutlet]=\"sectionTemplate || internalSectionTemplate\"\n      [ngTemplateOutletContext]=\"{ context: section.value.sectionItem }\"\n    ></ng-container>\n\n    <div\n      [class]=\"section.value.sectionItem?.className\"\n      *ngIf=\"!section.value.sectionItem?.multi; else multi\"\n    >\n      <ng-container\n        *ngFor=\"let control of section.value.controls | keyvalue: orderForm\"\n      >\n        <ng-container\n          [ngTemplateOutlet]=\"itemTemplate\"\n          [ngTemplateOutletContext]=\"{ context: control.value.formItem }\"\n        ></ng-container>\n        <div\n          [class]=\"control.value.formItem?.className\"\n          *ngIf=\"shouldRenderControl(section.key, control.value.formItem)\"\n        >\n          <ng-container *ngIf=\"control.value.formGroup; else singleItem\">\n            <app-dynamic-form-item\n              [parentFormGroup]=\"extendedFormGroup\"\n              [control]=\"control.value\"\n              [submitted]=\"submitted\"\n              (createFormGroup)=\"createFormGroup($event)\"\n              (controlValueChanged)=\"controlValueChanged()\"\n            ></app-dynamic-form-item>\n            <ng-container\n              [ngSwitch]=\"shouldRenderFollowUpControlsType(control.value)\"\n            >\n              <ng-container *ngSwitchCase=\"'inline'\">\n                <div\n                  *ngFor=\"\n                    let item of control.value.formGroup.controls\n                      | keyvalue: orderForm\n                  \"\n                >\n                  <app-dynamic-form-item\n                    [parentFormGroup]=\"extendedFormGroup\"\n                    [control]=\"item.value\"\n                    [submitted]=\"submitted\"\n                    (controlValueChanged)=\"controlValueChanged()\"\n                  ></app-dynamic-form-item>\n                </div>\n              </ng-container>\n              <ng-container *ngSwitchDefault>\n                <app-dynamic-form-data\n                  [control]=\"control\"\n                  (editControl)=\"editItemFromParent($event)\"\n                  (deleteControl)=\"removeItemFromParent($event)\"\n                ></app-dynamic-form-data>\n                <ng-container *ngIf=\"control.value.value?.followUpItems?.multi\">\n                  <button\n                    class=\"btn btn-sm btn-secondary\"\n                    type=\"button\"\n                    (click)=\"\n                      createFormGroup(control.value.value.followUpItems?.items)\n                    \"\n                  >\n                    + Add new\n                  </button>\n                </ng-container>\n                <ng-container\n                  [ngTemplateOutlet]=\"modalTemplate\"\n                  [ngTemplateOutletContext]=\"{ context: control }\"\n                ></ng-container>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n          <ng-template #singleItem>\n            <app-dynamic-form-item\n              [parentFormGroup]=\"extendedFormGroup\"\n              [control]=\"control.value\"\n              [sectionId]=\"section.value.sectionItem.key\"\n              [itemCustomClass]=\"itemCustomClass\"\n              [submitted]=\"submitted\"\n              (createFormGroup)=\"createFormGroup($event)\"\n              (itemAddedClicked)=\"\n                addNewItemToFormArrayWithId(section.key, $event)\n              \"\n              (itemRemovedClicked)=\"\n                removeItemAtIndexFromFormArrayWithId(section.key, $event)\n              \"\n              (controlValueChanged)=\"controlValueChanged()\"\n            ></app-dynamic-form-item>\n            <ng-container\n              [ngTemplateOutlet]=\"modalTemplate\"\n              [ngTemplateOutletContext]=\"{ context: control }\"\n            ></ng-container>\n          </ng-template>\n        </div>\n      </ng-container>\n    </div>\n\n    <ng-template #multi>\n      <div\n        class=\"dynamic-form-section-item\"\n        [class]=\"section.value.sectionItem.className\"\n        *ngFor=\"\n          let arrayControl of getFormArrayControls(section.value);\n          let i = index\n        \"\n      >\n        <ng-container\n          *ngFor=\"let control of arrayControl.controls | keyvalue: orderForm\"\n        >\n          <div\n            class=\"form-group\"\n            [class]=\"control.value.formItem.className\"\n            *ngIf=\"\n              shouldRenderControl(\n                section.value.sectionItem.key,\n                control.value.formItem,\n                i\n              )\n            \"\n          >\n            <app-dynamic-form-item\n              [formGroup]=\"extendedFormGroup\"\n              [control]=\"control.value\"\n              [sectionId]=\"section.value.sectionItem.key + control.key + i\"\n              [submitted]=\"submitted\"\n              (createFormGroup)=\"createFormGroup($event)\"\n              (itemAddedClicked)=\"\n                addNewItemToFormArrayWithId(section.key, $event, i)\n              \"\n              (itemRemovedClicked)=\"\n                removeItemAtIndexFromFormArrayWithId(section.key, $event, i)\n              \"\n              (controlValueChanged)=\"controlValueChanged()\"\n            ></app-dynamic-form-item>\n            <ng-container\n              [ngSwitch]=\"shouldRenderFollowUpControlsType(control.value)\"\n            >\n              <ng-container *ngSwitchCase=\"'inline'\">\n                <div\n                  *ngFor=\"\n                    let item of control.value.formGroup.controls\n                      | keyvalue: orderForm\n                  \"\n                >\n                  <app-dynamic-form-item\n                    [parentFormGroup]=\"extendedFormGroup\"\n                    [control]=\"item.value\"\n                    [submitted]=\"submitted\"\n                    (createFormGroup)=\"createFormGroup($event)\"\n                    (controlValueChanged)=\"controlValueChanged()\"\n                  ></app-dynamic-form-item>\n                </div>\n              </ng-container>\n              <ng-container *ngSwitchDefault>\n                <app-dynamic-form-data\n                  [control]=\"control\"\n                  (editControl)=\"editItemFromParent($event)\"\n                  (deleteControl)=\"removeItemFromParent($event)\"\n                ></app-dynamic-form-data>\n                <ng-container *ngIf=\"control.value.value?.followUpItems?.multi\">\n                  <button\n                    class=\"btn btn-sm btn-secondary\"\n                    type=\"button\"\n                    (click)=\"\n                      createFormGroup(control.value.value.followUpItems?.items)\n                    \"\n                  >\n                    + Add new\n                  </button>\n                  <ng-container\n                    [ngTemplateOutlet]=\"modalTemplate\"\n                    [ngTemplateOutletContext]=\"{ context: control }\"\n                  ></ng-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </div>\n        </ng-container>\n        <button\n          *ngIf=\"getFormArrayControls(section.value).length > 1\"\n          [id]=\"section.value.sectionItem.key + i + '-remove'\"\n          class=\"btn btn-sm btn-outline-danger\"\n          type=\"button\"\n          (click)=\"\n            removeItemAtIndexFromFormArrayWithId(\n              section.value.sectionItem.key,\n              null,\n              i\n            )\n          \"\n        >\n          - Remove {{ section.value.sectionItem.title }}\n        </button>\n      </div>\n\n      <button\n        [id]=\"section.value.sectionItem.key + '-add'\"\n        class=\"btn btn-sm btn-secondary\"\n        type=\"button\"\n        (click)=\"addNewItemToFormArrayWithId(section.value.sectionItem.key)\"\n      >\n        + Add new {{ section.value.sectionItem.title }}\n      </button>\n    </ng-template>\n  </div>\n  <ng-template let-context=\"context\" #modalTemplate>\n    <app-dynamic-form-modal\n      *ngIf=\"modalShouldBeRendered(context?.value)\"\n      [modalToggle]=\"followUpModalToggle\"\n      [control]=\"context\"\n      [form]=\"newFormGroup.form\"\n      [controlIndex]=\"newFormGroup.index\"\n      (saveControl)=\"saveFollowUpModal($event)\"\n      (cancelControl)=\"dimissFollowUpModal($event)\"\n      (deleteControl)=\"removeItemFromParent($event)\"\n    ></app-dynamic-form-modal>\n  </ng-template>\n  <ng-container\n    *ngIf=\"hasFormActions && actionsTemplate; else internalActionsTemplate\"\n    [ngTemplateOutlet]=\"actionsTemplate\"\n  ></ng-container>\n  <ng-template #internalActionsTemplate>\n    <div *ngIf=\"hasFormActions\" class=\"d-flex justify-content-between\">\n      <div>\n        <button\n          *ngIf=\"cancelAction.hasAction\"\n          class=\"btn btn-secondary\"\n          (click)=\"cancel()\"\n        >\n          {{ cancelAction.label }}\n        </button>\n        <button\n          *ngIf=\"previousAction.hasAction\"\n          class=\"btn btn-outline-primary\"\n          (click)=\"previous()\"\n        >\n          {{ previousAction.label }}\n        </button>\n      </div>\n      <button\n        *ngIf=\"nextAction.hasAction\"\n        class=\"btn btn-primary\"\n        (click)=\"next()\"\n      >\n        {{ nextAction.label }}\n      </button>\n    </div>\n  </ng-template>\n\n  <ng-template let-context=\"context\" #internalSectionTemplate>\n    <span *ngIf=\"context?.category\">{{ context.category }}</span>\n    <h3 *ngIf=\"context?.title\">{{ context.title }}</h3>\n  </ng-template>\n</form>\n"
        },
        {
            "name": "DynamicFormDataComponent",
            "id": "component-DynamicFormDataComponent-152c6e5c6c37a3237329f4fe6f4d3956",
            "file": "projects/dynamic-form/src/lib/dynamic-from-data/dynamic-form-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-data",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-data.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 11,
                    "type": "ExtendedFormGroupControl"
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteControl",
                    "defaultValue": "new EventEmitter()",
                    "line": 13,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "editControl",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "formArray",
                            "type": "ExtendedFormArray"
                        },
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "formArray",
                            "type": "ExtendedFormArray",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "form",
                            "type": "ExtendedFormControl"
                        },
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "ExtendedFormControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { ExtendedFormArray } from \"../model/custom-classes/extended-form-array\";\nimport { ExtendedFormControl } from \"../model/custom-classes/extended-form-control\";\nimport { ExtendedFormGroupControl } from \"../model/custom-classes/extended-form-group\";\n\n@Component({\n    selector: \"app-dynamic-form-data\",\n    templateUrl: \"./dynamic-form-data.component.html\",\n})\nexport class DynamicFormDataComponent {\n    @Input() control: ExtendedFormGroupControl;\n    @Output() editControl: EventEmitter<any> = new EventEmitter();\n    @Output() deleteControl: EventEmitter<any> = new EventEmitter();\n\n    edit(formArray: ExtendedFormArray, index: number): void {\n        this.editControl.emit({ formArray, index });\n    }\n\n    remove(form: ExtendedFormControl, index: number): void {\n        this.deleteControl.emit({ form, index });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<table\n  class=\"table table-hover\"\n  *ngIf=\"control.value?.formGroup?.value?.length\"\n>\n  <thead>\n    <tr>\n      <th *ngFor=\"let header of control.value.formGroup.value[0] | keyvalue\">\n        {{ header.key }}\n      </th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let item of control.value.formGroup.value; let i = index\">\n      <td *ngFor=\"let val of item | keyvalue\">\n        {{ val.value }}\n      </td>\n      <td>\n        <button\n          class=\"btn btn-sm btn-secondary\"\n          type=\"button\"\n          (click)=\"edit(control.value.formGroup, i)\"\n        >\n          Edit\n        </button>\n      </td>\n      <td>\n        <button\n          class=\"btn btn-sm btn-secondary btn-danger\"\n          type=\"button\"\n          (click)=\"remove(control.value, i)\"\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
        },
        {
            "name": "DynamicFormItemComponent",
            "id": "component-DynamicFormItemComponent-d4800cf9db982760479026519441d835",
            "file": "projects/dynamic-form/src/lib/dynamic-form-item/dynamic-form-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-item",
            "styleUrls": [],
            "styles": [
                "\n            ::ng-deep .dynamic-form-item {\n                margin-bottom: 1.5rem;\n            }\n\n            ::ng-deep .dynamic-form-item-description {\n                margin-bottom: 0.5rem;\n            }\n        "
            ],
            "templateUrl": [
                "./dynamic-form-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 26,
                    "type": "ExtendedFormControl | ExtendedFormArray"
                },
                {
                    "name": "itemCustomClass",
                    "defaultValue": "\"\"",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "parentFormGroup",
                    "line": 27,
                    "type": "ExtendedFormGroup | ExtendedFormGroup[]"
                },
                {
                    "name": "sectionId",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "line": 30,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "controlValueChanged",
                    "defaultValue": "new EventEmitter()",
                    "line": 34,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "createFormGroup",
                    "defaultValue": "new EventEmitter()",
                    "line": 31,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "itemAddedClicked",
                    "defaultValue": "new EventEmitter()",
                    "line": 32,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "itemRemovedClicked",
                    "defaultValue": "new EventEmitter()",
                    "line": 33,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "DynamicFormType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "makeId",
                    "args": [
                        {
                            "name": "info",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "info",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output, OnInit } from \"@angular/core\";\nimport { ExtendedFormControl } from \"../model/custom-classes/extended-form-control\";\nimport { ExtendedFormArray } from \"../model/custom-classes/extended-form-array\";\nimport { DynamicFormType } from \"../model/dynamicFormType\";\nimport { isEmpty } from \"@sebgroup/frontend-tools\";\nimport { RuleType, Rule } from \"../model/models\";\nimport { FormService } from \"../form.service\";\nimport { ExtendedFormGroup, ExtendedFormGroupControl } from \"../model/custom-classes/extended-form-group\";\n\n@Component({\n    selector: \"app-dynamic-form-item\",\n    templateUrl: \"./dynamic-form-item.component.html\",\n    styles: [\n        `\n            ::ng-deep .dynamic-form-item {\n                margin-bottom: 1.5rem;\n            }\n\n            ::ng-deep .dynamic-form-item-description {\n                margin-bottom: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DynamicFormItemComponent implements OnInit {\n    @Input() control: ExtendedFormControl | ExtendedFormArray;\n    @Input() parentFormGroup: ExtendedFormGroup | ExtendedFormGroup[];\n    @Input() sectionId: string;\n    @Input() itemCustomClass: string = \"\";\n    @Input() submitted: boolean = false;\n    @Output() createFormGroup: EventEmitter<any> = new EventEmitter();\n    @Output() itemAddedClicked: EventEmitter<string> = new EventEmitter();\n    @Output() itemRemovedClicked: EventEmitter<{ id: string; index: number }> = new EventEmitter();\n    @Output() controlValueChanged: EventEmitter<boolean> = new EventEmitter();\n    controlType = DynamicFormType;\n\n    constructor(private formService: FormService) {}\n\n    ngOnInit(): void {\n        this.control.valueChanges?.subscribe((valueChange: any) => {\n            this.controlValueChanged.emit(true);\n\n            const rule = this.control?.formItem?.rules?.find(\n                (rule: Rule) =>\n                    rule.type === RuleType.minThanReference ||\n                    rule.type === RuleType.minThanEqualsReference ||\n                    rule.type === RuleType.maxThanReference ||\n                    rule.type === RuleType.maxThanEqualReference\n            );\n\n            if (rule && this.formService.findNestedControl(this.parentFormGroup, rule.value)) {\n                const referenceControl: ExtendedFormGroupControl = this.formService.findNestedControl(this.parentFormGroup, rule.value);\n                this.formService.appendValidations(this.control, rule, referenceControl);\n            }\n            if (valueChange?.followUpItems?.items?.length) {\n                if (valueChange.followUpItems.type === \"modal\") {\n                    delete (this.control as ExtendedFormControl).formGroup;\n                    this.createFormGroup.emit(valueChange?.followUpItems?.items);\n                } else {\n                    (this.control as ExtendedFormControl).formGroup = this.formService.dynamicFormItemsToFormGroup(\n                        valueChange?.followUpItems?.items\n                    );\n                }\n            } else {\n                delete (this.control as ExtendedFormControl).formGroup;\n            }\n        });\n    }\n\n    get formArrayControls(): ExtendedFormArray[\"controls\"] {\n        if (this.control instanceof ExtendedFormArray) {\n            return this.control.controls;\n        } else {\n            console.warn(\"Error in getFormArrayControls: control is not an instance of ExtendedFormArray\");\n            return [];\n        }\n    }\n\n    makeId(info?: string, index?: number): string {\n        return `${this.sectionId}-${this.control.formItem.key}-${this.control.formItem.controlType}${\n            info ? `-${info}` : \"\" + index ? `-${index}` : \"\"\n        }`;\n    }\n\n    get error(): string {\n        if (this.submitted && this.control?.errors && !isEmpty(this.control.errors)) {\n            const errorObjKey: string = Object.keys(this.control.errors)[0];\n            switch (errorObjKey) {\n                case \"min\":\n                    return this.control.formItem.rules.find(\n                        (rule: Rule) =>\n                            rule.type === RuleType.min ||\n                            rule.type === RuleType.minThanEqualsReference ||\n                            rule.type === RuleType.minThanReference\n                    )?.message;\n                case \"max\":\n                    return this.control.formItem.rules.find(\n                        (rule: Rule) =>\n                            rule.type === RuleType.max ||\n                            rule.type === RuleType.maxThanEqualReference ||\n                            rule.type === RuleType.maxThanReference\n                    )?.message;\n                case \"minlength\":\n                    return this.control.formItem.rules.find((rule: Rule) => rule.type === RuleType.minLength)?.message;\n                case \"maxlength\":\n                    return this.control.formItem.rules.find((rule: Rule) => rule.type === RuleType.maxLength)?.message;\n                case \"required\":\n                    return this.control.formItem.rules.find((rule: Rule) => rule.type === RuleType.required)?.message;\n                default:\n                    break;\n            }\n        }\n        return \"\";\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            ::ng-deep .dynamic-form-item {\n                margin-bottom: 1.5rem;\n            }\n\n            ::ng-deep .dynamic-form-item-description {\n                margin-bottom: 0.5rem;\n            }\n        \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formArrayControls": {
                    "name": "formArrayControls",
                    "getSignature": {
                        "name": "formArrayControls",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                },
                "error": {
                    "name": "error",
                    "getSignature": {
                        "name": "error",
                        "type": "string",
                        "returnType": "string",
                        "line": 85
                    }
                }
            },
            "templateData": "<ng-container [ngSwitch]=\"control.formItem?.controlType\">\n    <label *ngIf=\"control.formItem.label && control.formItem.controlType !== 'Checkbox'\">{{ control.formItem.label }}</label>\n    <span *ngIf=\"control.formItem.descriptionHeader\">{{ control.formItem.descriptionHeader }}</span>\n    <p class=\"dynamic-form-item-description\" *ngIf=\"control.formItem.description && control.formItem.controlType !== 'Checkbox'\">\n        <small>{{ control.formItem.description }}</small>\n    </p>\n\n    <div class=\"row p-0\" *ngIf=\"control.formItem.media?.length; else formItem\">\n        <div class=\"col-6\">\n            <ng-container [ngTemplateOutlet]=\"formItem\"></ng-container>\n        </div>\n        <div class=\"col-6\">\n            <app-dynamic-form-media [media]=\"control.formItem.media[0]\"></app-dynamic-form-media>\n        </div>\n    </div>\n\n    <ng-template #formItem>\n        <div class=\"item-wrapper\" [ngClass]=\"itemCustomClass\">\n            <ng-container\n                [ngTemplateOutlet]=\"metadata\"\n                [ngTemplateOutletContext]=\"{ context: control.formItem.controlMetaData }\"\n            ></ng-container>\n            <ng-container *ngSwitchCase=\"controlType.Text.toString()\">\n                <sebng-textbox\n                    *ngIf=\"!control.formItem.multi; else multi\"\n                    [id]=\"makeId()\"\n                    className=\"dynamic-form-item\"\n                    [name]=\"makeId()\"\n                    [placeholder]=\"control.formItem.placeholder\"\n                    [formControl]=\"control\"\n                    [rightText]=\"control.formItem?.controlMetaData?.inputGroupLabel\"\n                    [error]=\"error\"\n                >\n                </sebng-textbox>\n\n                <ng-template #multi>\n                    <div *ngFor=\"let arrayControl of formArrayControls; let i = index\">\n                        <div class=\"input-group dynamic-form-item\">\n                            <input\n                                type=\"text\"\n                                class=\"form-control\"\n                                [id]=\"makeId(null, i)\"\n                                [formControl]=\"arrayControl\"\n                                [placeholder]=\"control.formItem.placeholder ? control.formItem.placeholder : ''\"\n                            />\n                            <div *ngIf=\"formArrayControls?.length > 1\" class=\"input-group-append\">\n                                <button\n                                    [id]=\"makeId('multitextbox-remove', i)\"\n                                    class=\"btn btn-outline-danger\"\n                                    type=\"button\"\n                                    (click)=\"itemRemovedClicked.emit({ id: control.formItem.key, index: i })\"\n                                >\n                                    –\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    <button\n                        [id]=\"makeId('multitextbox-add')\"\n                        class=\"btn btn-outline-primary\"\n                        type=\"button\"\n                        (click)=\"itemAddedClicked.emit(control.formItem.key)\"\n                    >\n                        +\n                    </button>\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"controlType.TextArea.toString()\">\n                <sebng-textarea\n                    className=\"dynamic-form-item\"\n                    [id]=\"makeId()\"\n                    [placeholder]=\"control.formItem.placeholder\"\n                    [formControl]=\"control\"\n                    [error]=\"error\"\n                ></sebng-textarea>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"controlType.Number?.toString()\">\n                <sebng-textbox\n                    className=\"dynamic-form-item\"\n                    pattern=\"[0-9]*\"\n                    inputmode=\"numeric\"\n                    type=\"text\"\n                    digitsOnly\n                    [rightText]=\"control.formItem?.controlMetaData?.inputGroupLabel\"\n                    [formControl]=\"control\"\n                    [error]=\"error\"\n                ></sebng-textbox>\n                <!-- <sebng-stepper className=\"dynamic-form-item\" [id]=\"makeId()\" [formControl]=\"control\"></sebng-stepper> -->\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"controlType.Checkbox.toString()\">\n                <sebng-checkbox\n                    [formControl]=\"control\"\n                    [id]=\"makeId()\"\n                    [label]=\"control.formItem.label\"\n                    [description]=\"control.formItem.description\"\n                    [error]=\"error\"\n                ></sebng-checkbox>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"controlType.Dropdown.toString()\">\n                <sebng-dropdown\n                    className=\"dynamic-form-item\"\n                    [formControl]=\"control\"\n                    [id]=\"makeId()\"\n                    [searchable]=\"true\"\n                    [multi]=\"control.formItem.multi\"\n                    [placeholder]=\"control.formItem.placeholder\"\n                    [list]=\"control.formItem.options\"\n                    [error]=\"error\"\n                ></sebng-dropdown>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"controlType.Datepicker.toString()\">\n                <sebng-datepicker\n                    className=\"dynamic-form-item\"\n                    [formControl]=\"control\"\n                    [id]=\"makeId()\"\n                    [placeholder]=\"control.formItem.placeholder || 'yyyy-mm-dd'\"\n                    [error]=\"error\"\n                ></sebng-datepicker>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"controlType.Radio.toString()\">\n                <sebng-radio-group\n                    className=\"dynamic-form-item\"\n                    [condensed]=\"true\"\n                    [inline]=\"true\"\n                    [formControl]=\"control\"\n                    [id]=\"makeId()\"\n                    [list]=\"control.formItem.options\"\n                    [error]=\"error\"\n                ></sebng-radio-group>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"controlType.ToggleSelector.toString()\">\n                <sebng-toggle-selector\n                    class=\"d-flex\"\n                    [formControl]=\"control\"\n                    [list]=\"control.formItem.options\"\n                    [error]=\"error\"\n                ></sebng-toggle-selector>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"controlType.Card.toString()\">\n                <sebng-toggle-selector [formControl]=\"control\" [list]=\"control.formItem.options\" [error]=\"error\"></sebng-toggle-selector>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"controlType.Disclaimer.toString()\"> DISCLAIMER </ng-container>\n        </div>\n    </ng-template>\n</ng-container>\n\n<ng-template let-context=\"context\" #metadata>\n    <span class=\"d-block font-weight-medium\" *ngIf=\"context?.label\">{{ context.label }}</span>\n    <span class=\"d-block\" *ngIf=\"context?.description\">{{ context.description }}</span>\n</ng-template>\n\n<ng-container [ngTemplateOutlet]=\"metadata\"></ng-container>\n"
        },
        {
            "name": "DynamicFormMediaComponent",
            "id": "component-DynamicFormMediaComponent-a30c72a2c8770d44250765852b92cda7",
            "file": "projects/dynamic-form/src/lib/dynamic-form-media/dynamic-form-media.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-media",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-media.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "media",
                    "line": 10,
                    "type": "Media"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "image",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'img'"
                        }
                    ]
                },
                {
                    "name": "imgHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "description": "<p>Calculate image height based on the current width, the origin width and the origin height\nheight = currentWidth * naturalHeight / naturalWidth</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { SafeResourceUrl, SafeUrl } from '@angular/platform-browser';\nimport { Media, MediaKind } from '../model/dynamicFormItem';\n\n@Component({\n  selector: 'app-dynamic-form-media',\n  templateUrl: './dynamic-form-media.component.html',\n})\nexport class DynamicFormMediaComponent {\n  @Input() media: Media;\n  @ViewChild('img') image: ElementRef;\n  imgHeight: number;\n\n  get mediaPath(): SafeResourceUrl | SafeUrl | string | null {\n    if (this.media?.url) {\n      switch (this.media.kind) {\n        case MediaKind.Image:\n          return this.media.url;\n        case MediaKind.Video:\n          return this.media.url;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Calculate image height based on the current width, the origin width and the origin height\n   * height = currentWidth * naturalHeight / naturalWidth\n   */\n  calculateHeight(): void {\n    if (this.image) {\n      this.imgHeight =\n        (this.image.nativeElement.offsetWidth *\n          this.image.nativeElement.naturalHeight) /\n        this.image.nativeElement.naturalWidth;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "mediaPath": {
                    "name": "mediaPath",
                    "getSignature": {
                        "name": "mediaPath",
                        "type": "",
                        "returnType": "SafeResourceUrl | SafeUrl | string | null",
                        "line": 14
                    }
                }
            },
            "templateData": "<ng-container [ngSwitch]=\"media.kind\">\n    <div class=\"media-container\" *ngSwitchCase=\"0\">\n        <img #img [src]=\"mediaPath | safe: 'resourceUrl'\" [alt]=\"media.description\" [height]=\"imgHeight\" (load)=\"calculateHeight()\" />\n    </div>\n    <div class=\"media-container\" *ngSwitchCase=\"1\">\n        <iframe [src]=\"mediaPath | safe: 'resourceUrl'\" allow=\"fullscreen\" frameBorder=\"0\"></iframe>\n    </div>\n    <span *ngIf=\"media?.description && media?.url\">{{ media.description }}</span>\n</ng-container>\n"
        },
        {
            "name": "DynamicFormModalComponent",
            "id": "component-DynamicFormModalComponent-e2e65c36e4d4d470943af4c151900748",
            "file": "projects/dynamic-form/src/lib/dynamic-form-modal/dynamic-form-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "centered",
                    "defaultValue": "false",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "control",
                    "line": 16,
                    "type": "ExtendedFormGroupControl"
                },
                {
                    "name": "controlIndex",
                    "line": 17,
                    "type": "number"
                },
                {
                    "name": "form",
                    "line": 19,
                    "type": "ExtendedFormGroup"
                },
                {
                    "name": "modalToggle",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "position",
                    "defaultValue": "'right'",
                    "line": 21,
                    "type": "ModalPosition"
                },
                {
                    "name": "size",
                    "line": 22,
                    "type": "ModalSize"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelControl",
                    "defaultValue": "new EventEmitter()",
                    "line": 25,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "deleteControl",
                    "defaultValue": "new EventEmitter()",
                    "line": 26,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "saveControl",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "orderForm",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "controlValueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { KeyValue } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ModalPosition, ModalSize } from '@sebgroup/ng-components';\n\nimport { ExtendedFormControl } from '../model/custom-classes/extended-form-control';\nimport {\n  ExtendedFormGroup,\n  ExtendedFormGroupControl,\n} from '../model/custom-classes/extended-form-group';\n\n@Component({\n  selector: 'app-dynamic-form-modal',\n  templateUrl: './dynamic-form-modal.component.html',\n})\nexport class DynamicFormModalComponent {\n  @Input() control: ExtendedFormGroupControl;\n  @Input() controlIndex: number;\n  @Input() modalToggle: boolean;\n  @Input() form: ExtendedFormGroup;\n  @Input() centered: boolean = false;\n  @Input() position: ModalPosition = 'right';\n  @Input() size: ModalSize;\n\n  @Output() saveControl: EventEmitter<any> = new EventEmitter();\n  @Output() cancelControl: EventEmitter<any> = new EventEmitter();\n  @Output() deleteControl: EventEmitter<any> = new EventEmitter();\n\n  submitted: boolean = false;\n\n  dismiss(): void {\n    this.cancelControl.emit(this.control.value);\n  }\n\n  save(): void {\n    this.form.updateValueAndValidity();\n    this.submitted = true;\n    if (this.form.valid) {\n      this.saveControl.emit({ item: this.form, control: this.control.value });\n    }\n  }\n\n  remove(): void {\n    this.deleteControl.emit({\n      form: this.control.value,\n      index: this.controlIndex,\n    });\n  }\n\n  orderForm = (\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\n  ): number => {\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\n      return (\n        (a.value as ExtendedFormGroup).sectionItem.order -\n        (b.value as ExtendedFormGroup).sectionItem.order\n      );\n    } else if (a.value['formItem'] && b.value['formItem']) {\n      return (\n        (a.value as ExtendedFormControl).formItem.order -\n        (b.value as ExtendedFormControl).formItem.order\n      );\n    }\n    return 0;\n  };\n\n  controlValueChanged(): void {\n    this.submitted &&= false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sebng-modal\n  [toggle]=\"modalToggle\"\n  [centered]=\"centered\"\n  [position]=\"position\"\n  [size]=\"size\"\n  (dismiss)=\"dismiss()\"\n>\n  <ng-container body>\n    <div *ngFor=\"let item of form.controls | keyvalue: orderForm\">\n      <app-dynamic-form-item\n        [control]=\"item.value\"\n        [submitted]=\"submitted\"\n        (controlValueChanged)=\"controlValueChanged()\"\n      ></app-dynamic-form-item>\n    </div>\n  </ng-container>\n  <ng-container footer>\n    <button\n      *ngIf=\"controlIndex !== null\"\n      class=\"btn btn-danger\"\n      (click)=\"remove()\"\n    >\n      Delete\n    </button>\n    <button class=\"btn btn-primary\" (click)=\"save()\">Save</button>\n  </ng-container>\n</sebng-modal>\n"
        }
    ],
    "modules": [
        {
            "name": "DigitOnlyModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DigitOnlyDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DigitOnlyDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DynamicFormModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DynamicFormComponent"
                        },
                        {
                            "name": "DynamicFormDataComponent"
                        },
                        {
                            "name": "DynamicFormItemComponent"
                        },
                        {
                            "name": "DynamicFormMediaComponent"
                        },
                        {
                            "name": "DynamicFormModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DigitOnlyModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DigitOnlyModule"
                        },
                        {
                            "name": "DynamicFormComponent"
                        },
                        {
                            "name": "DynamicFormDataComponent"
                        },
                        {
                            "name": "DynamicFormItemComponent"
                        },
                        {
                            "name": "DynamicFormMediaComponent"
                        },
                        {
                            "name": "DynamicFormModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "DynamicFormItemComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SafePipeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "acqFormData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 'd0be9c91-3211-40a1-84a1-903133b07d7a',\n    name: 'Hög eller låg risk',\n    text:\n      'Hur tänker du om risk och möjlighet till avkastning när det gäller ditt pensionssparande?',\n    description:\n      'Att pensionsspara med högre risk innebär att sparandet har bättre möjligheter att växa, men att värdet kan gå mycket upp och ner fram tills du går i pension. Det finns också en risk att sparandet sjunker i värde.Med lägre risk svänger värdet på sparandet mindre, men du har inte möjlighet till samma avkastning som när du sparar med högre risk. Däremot minskar risken för att sparandet ska sjunka mycket i värde. ',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: 'c2999eba-8d4c-4649-965c-7aacaa9960d0',\n        url: 'https://seb-external.creo.se/i/tgO5DeWBQSjGfaUrPcZyxA',\n        kind: 1,\n        mimeType: null,\n        name: null,\n        description: 'Så kan du tänka om risk (01:39)',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '116469b6-afed-42ff-b697-efecb594ab08',\n        text:\n          'Jag vill få möjlighet till högre pension, även om det innebär högre risk',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: 'fcda0671-bd08-4349-b20a-e13cd200e499',\n        text:\n          'Jag vill att sparandet får möjlighet att växa, men risken får inte vara för hög',\n        reasonLabel: null,\n        category: '',\n        value: null,\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '8a4c0290-608b-4af7-b1a9-af3d7b1d6a57',\n        text:\n          'Jag vill att risken är låg, även om sparandet får sämre möjlighet att växa',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 3,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'a8566d0f-0530-4bb8-96b0-534c3f6a4f2c',\n    name: 'Hur hög risk?',\n    text: 'Hur viktig är möjligheten till högre pension?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [],\n    answerAlternatives: [\n      {\n        id: 'cd6f3d73-1656-4395-834d-10d3d5f250b7',\n        text: 'Mycket viktig och jag är beredd på att spara med hög risk',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '310da37d-c86f-4753-964b-77cf5dcc97da',\n        text: 'Viktigt men risken får inte vara för hög',\n        reasonLabel: null,\n        category: '',\n        value: '',\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '98f8bbd3-3f2c-41e3-a2a0-502806108dd4',\n    name: 'Kortsiktig risk',\n    text:\n      'Tänk dig att du idag har ett pensionssparande som är värt 100 000 kronor. Är du bekväm med att ha hög risk i det sparandet?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: '56798cd4-6dda-4416-9f78-3d30dbb789b0',\n        url:\n          '/api/v1/media/56798cd4-6dda-4416-9f78-3d30dbb789b0/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'main',\n        description:\n          'Här ser du hur det sparandet skulle kunna utvecklas på ett år med tre olika risknivåer. Den markerade raden visar det spann som tror att sparandet skulle hamna inom utifrån hur du har svarat hittills.',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '98a2e0ce-e46b-43e1-8593-7d78a6e954a6',\n        text: 'Ja, jag är bekväm med den risknivån',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Type\": 1}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '2cf8ca43-aeee-4fa7-b3d3-1cd7e2e7a365',\n        text: 'Nej, jag vill ha en annan risknivå',\n        reasonLabel: null,\n        category: '',\n        value: null,\n        order: 2,\n        type: 1,\n        configuration:\n          '{  \"Type\": 1,  \"Control\": {    \"Title\": \"-\",    \"Text\": \"-\",    \"Deny\": \"Close\"}}',\n        media: [],\n        rules: [],\n        confirm: {\n          title: 'Ändra dina svar',\n          message:\n            'Om du vill spara med en annan risknivå behöver du gå tillbaka och se över dina svar.',\n          accept: null,\n          deny: 'Stäng',\n        },\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '8096e8ae-8eb8-4008-ba34-b97404043068',\n    name: 'Olika riskstrategier',\n    text:\n      'Tänk dig att du har 3 år kvar till hela din pension har betalats ut och ett pensionssparande på 100 000 kronor. Vilken strategi skulle du vara mest bekväm med för det här pensionssparandet?',\n    description:\n      '{\"Heading\": \"Läs mer om riskstrategierna\",\"Texts\": [{\"Subheading\": \"Vad är en riskstrategi?\",\"Content\": \"När du sparar med SEB Bot Advisor får du en personlig riskstrategi. Riskstrategin kan var vara låg, medellåg, medel, medelhög eller hög. Det är den här strategin som avgör hur hög risken i sparandet blir och hur snabbt risken sänks. Oavsett strategi är risken högre när du har lång tid kvar till sista utbetalningen från sparandet, men sänks gradvis ju äldre du blir. Vilken riskstrategi som vi tillämpar för ditt sparande beror bland annat på hur du svarar på de här frågorna.\",\"Image\": \"high-risk\"},{\"Subheading\": \"Så funkar prognoserna\",\"Content\": \"&lt;p&gt;När vi räknar på hur sparandet kan utvecklas över tid använder vi oss av avancerade beräkningsmodeller. I frågan utgår vi från ett påhittat sparande och visar ett pessimistiskt, ett optimistiskt och ett förväntat värde för tre olika riskstrategier efter ett visst antal år. Vid den tidpunkten tror vi att värdet på sparandet kommer att ligga nära det förväntade värdet, men&lt;/p&gt;&lt;ul&gt;&lt;li&gt;det är 30 procents sannolikt att sparandet utvecklas till det optimistiska värdet eller mer&lt;/li&gt;&lt;li&gt;det är mindre än 5 procents sannolikhet att sparandet utvecklas till det pessimistiska värdet eller mindre.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I exemplen räknar vi med att värdet på sparandet fortsätter att förändras under spartiden.Däremot räknar vi inte med framtida inbetalningar.&lt;/p&gt;\",\"Image\": null}]}',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: '3164e266-039f-4ac1-8b87-31c2a29ba2e9',\n        url:\n          '/api/v1/media/3164e266-039f-4ac1-8b87-31c2a29ba2e9/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'main',\n        description:\n          'I tabellen ser du hur mycket du skulle kunna få utbetalt per månad med olika strategier.',\n      },\n      {\n        id: 'a6f876e3-000c-4c6b-8f19-af8e548f3439',\n        url:\n          '/api/v1/media/a6f876e3-000c-4c6b-8f19-af8e548f3439/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'high-risk',\n        description: '',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '810ef431-5a37-4adb-90a5-6f0e55b259ca',\n        text: 'Jag är bekväm med en strategi med hög risk',\n        reasonLabel: null,\n        category: 'RISK_WILLINGNESS',\n        value: '5',\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '3f4fd955-f855-41b7-8efd-8847ca54c8fd',\n        text: 'Jag är bekväm med en strategi med medelhög risk',\n        reasonLabel: null,\n        category: 'RISK_WILLINGNESS',\n        value: '4',\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'f404a81a-ad83-47cb-aa36-922c3d7cae52',\n    name: 'Hållbart sparande',\n    text: 'Vill du pensionsspara med hållbart fokus?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription:\n      'När vi väljer fonder till ditt sparande letar vi i första hand efter hållbara fonder. Om du dessutom har en hållbar profil prioriterar vi hållbarhet ännu mer. Hållbara fonder tar hänsyn till olika miljömässiga och sociala aspekter när de investerar i företag.',\n    optionType: 1,\n    media: [\n      {\n        id: 'c5f56e2e-e8f9-4944-83db-13913e4785fe',\n        url: 'https://seb-external.creo.se/i/ve6LxUx7pESgXjKOYyRtmg',\n        kind: 1,\n        mimeType: null,\n        name: null,\n        description: 'Så kan du påverka med ditt sparande (01:33)',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: 'd8be6bcc-1ef3-460c-b58d-b68f73ee5a95',\n        text: 'Ja, jag vill spara med hållbart fokus',\n        reasonLabel: '',\n        category: 'SUSTAINABILITY',\n        value: '1',\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '8b1870cd-2587-4549-8f79-88ba46e3cdd7',\n        text: 'Nej, jag vill inte spara med hållbart fokus',\n        reasonLabel: null,\n        category: 'SUSTAINABILITY',\n        value: '0',\n        order: 2,\n        type: 1,\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '001b2885-4960-4a64-835c-48ff20b3f3d7',\n    name: '',\n    text: 'Vi behöver veta mer om din ekonomi',\n    description:\n      'För att vi ska kunna ge råd som passar dig, behöver vi ställa några frågor om din ekonomi. Ju noggrannare du svarar, desto bättre råd kan du få. Det är viktigt att du svarar på alla frågor så att du inte får råd på felaktiga grunder.',\n    subTitle: '',\n    shortDescription: '',\n    optionType: 0,\n    media: [],\n    answerAlternatives: [],\n    groupQuestionItems: [],\n  },\n  {\n    id: '1b856337-9ba7-4186-a56d-a9c145fd851a',\n    name: 'Inkomst',\n    text: 'Hur stor är din månadsinkomst efter skatt?',\n    description: '',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 2,\n    media: [],\n    answerAlternatives: [\n      {\n        id: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\n        text: 'Din lön eller pension efter skatt en genomsnittlig månad',\n        reasonLabel: 'Räkna även med bidrag och provision.',\n        category: 'MONTHLY_INCOME',\n        value: '',\n        order: 1,\n        type: 5,\n        configuration:\n          '{  \"InputType\": \"Number\",  \"IsRequired\": true,  \"Max\": 1000000000,  \"Min\": 1,  \"Version\": \"1.0.0\",  \"Type\": 2,  \"GroupLabel\": \"kr/mån\",  \"ErrorMessage\": \"Fyll i din månadsinkomst\"}',\n        media: [],\n        rules: [\n          {\n            ruleType: 0,\n            value: null,\n            message: 'Fyll i din månadsinkomst',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '1000000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '53532df5-586f-453b-a1a4-d409b6fd4a9b',\n    name: 'Kvar i månaden',\n    text:\n      'Hur mycket brukar du ha kvar efter att du har betalat alla viktiga utgifter?',\n    description:\n      'Räkna också med sådant som är viktigt för dig, till exempel restaurangbesök och sparande till resor.',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 2,\n    media: [],\n    answerAlternatives: [\n      {\n        id: 'a6e8eabd-2f14-4b23-8a6d-8cb40b9f8a14',\n        text: '',\n        reasonLabel: 'Kvar i månaden',\n        category: 'MONTHLY_AMOUNT_LEFT',\n        value: null,\n        order: 1,\n        type: 5,\n        media: [],\n        rules: [\n          {\n            ruleType: 0,\n            value: null,\n            message: 'Fyll i hur mycket du brukar ha kvar i månaden',\n          },\n          {\n            ruleType: 9,\n            value: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'c9205109-37e1-4b7d-82c3-d6a2a62dbfb2',\n    name: 'Tillgångar',\n    text: 'Lägg till dina tillgångar som du har hos eller utanför SEB.',\n    description: '',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 3,\n    media: [],\n    answerAlternatives: [\n      {\n        id: '88e329bb-c2da-46e6-927b-04c1a4eb3714',\n        text: 'Har du pengar på konton?',\n        reasonLabel: null,\n        category: 'SAVING_AMOUNT',\n        value: null,\n        order: 1,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '1000000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [\n          {\n            id: '1b856337-9ba7-4186-a56d-a9c145fd851a',\n            name: 'Inkomst',\n            text: 'Pengar på konton',\n            description: '',\n            subTitle: '',\n            shortDescription: '',\n            optionType: 2,\n            media: [],\n            answerAlternatives: [\n              {\n                id: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\n                text:\n                  'Räkna även med pengar som du har på konton hos SEB. Om du har ett konto tillsammans med någon fyller du i din del av värdet.',\n                reasonLabel: 'Värde',\n                category: 'SAVING_AMOUNT',\n                value: '',\n                order: 1,\n                type: 5,\n\n                media: [],\n                rules: [\n                  {\n                    ruleType: 0,\n                    value: null,\n                    message: 'Value required',\n                  },\n                  {\n                    ruleType: 3,\n                    value: '1000000000',\n                    message: 'Värdet kan inte vara över',\n                  },\n                  {\n                    ruleType: 2,\n                    value: '1',\n                    message:\n                      'Du behöver fylla i ett värde större än eller lika med',\n                  },\n                ],\n                confirm: null,\n                followupQuestions: [],\n              },\n            ],\n            groupQuestionItems: [],\n          },\n        ],\n      },\n      {\n        id: '05e91ea8-ffcf-4f7a-bf33-cc7c72a3692e',\n        text: 'Äger du fonder eller värdepapper?',\n        reasonLabel: '',\n        category: 'SAVING_AMOUNT',\n        value: null,\n        order: 2,\n        type: 3,\n\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '40a3d9d6-fe4a-4290-a591-e4887defd9bb',\n        text: 'Äger du någon fastighet?',\n        reasonLabel: '',\n        category: 'HOME_VALUE',\n        value: null,\n        order: 3,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: null,\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: 'b5f188a9-6ca8-4c08-9db8-bd5315316077',\n        text: 'Äger du något företag?',\n        reasonLabel: '',\n        category: 'ASSETS_VALUE',\n        value: null,\n        order: 4,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: null,\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '0c1ccfb5-4f41-4fee-bc77-d1c8fe52fc01',\n        text: 'Har du andra tillgångar?',\n        reasonLabel: '',\n        category: 'ASSETS_VALUE',\n        value: '',\n        order: 5,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: null,\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'a7c43f6c-9fc0-43bb-bc46-f5c9a6f3de85',\n    name: 'Skulder',\n    text: 'Lägg till skulder som du har hos eller utanför SEB.',\n    description: '',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 3,\n    media: [],\n    answerAlternatives: [\n      {\n        id: '6c1865c2-b3f8-4c62-81db-8c226922f704',\n        text: 'Har du bolån?',\n        reasonLabel: '',\n        category: 'HOME_MORTGAGE',\n        value: null,\n        order: 1,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 2,\n            value: '1',\n            message: null,\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '56b18f29-b891-474d-b95f-4ef055541f62',\n        text: 'Har du studielån?',\n        reasonLabel: null,\n        category: 'DEBTS',\n        value: null,\n        order: 2,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '03f82657-2ed2-4e95-bbf6-cf3d5c8c6268',\n        text: 'Har du andra lån?',\n        reasonLabel: '',\n        category: 'DEBTS',\n        value: null,\n        order: 3,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 2,\n            value: '1',\n            message: null,\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: 'c1e9b886-39e9-476e-a7c6-f4b7eba39ca7',\n        text: 'Har du någon kreditkortsskuld? ',\n        reasonLabel: '',\n        category: 'DEBTS',\n        value: null,\n        order: 4,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '1e228169-a2f3-42e5-8cc0-58473f5d53db',\n        text: 'Har du andra skulder?',\n        reasonLabel: '',\n        category: 'DEBTS',\n        value: null,\n        order: 5,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n]"
            },
            {
                "name": "AcquisitionForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "attributeTypeMapDynamicFormItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n]"
            },
            {
                "name": "attributeTypeMapDynamicFormOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n]"
            },
            {
                "name": "attributeTypeMapDynamicFormResponseItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"sectionId\", type: \"string\" },\n    { name: \"sectionIndex\", type: \"number\" },\n    { name: \"formItem\", type: \"DynamicFormItem\" },\n]"
            },
            {
                "name": "attributeTypeMapDynamicFormSection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\n    { name: \"title\", type: \"string\" },\n    { name: \"category\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"key\", type: \"string\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"sectionType\", type: \"any\" },\n    { name: \"items\", type: \"Array<DynamicFormItem>\" },\n]"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ComplexForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DynamicFormType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                "type": "object",
                "defaultValue": "{\n    Text: \"Text\" as DynamicFormType,\n    TextArea: \"TextArea\" as DynamicFormType,\n    Checkbox: \"Checkbox\" as DynamicFormType,\n    Dropdown: \"Dropdown\" as DynamicFormType,\n    Datepicker: \"Datepicker\" as DynamicFormType,\n    Radio: \"Radio\" as DynamicFormType,\n    Number: \"Number\" as DynamicFormType,\n    Card: \"Card\" as DynamicFormType,\n    ToggleSelector: \"ToggleSelector\" as DynamicFormType,\n    Disclaimer: \"Disclaimer\" as DynamicFormType,\n    None: \"None\" as DynamicFormType,\n}"
            },
            {
                "name": "familyFollowup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "FollowUpItem",
                "defaultValue": "{\n  type: 'inline',\n  items: [\n    {\n      key: 'partner-birth-date',\n      controlType: 'Datepicker',\n      value: '',\n      controlMetaData: {\n        label: 'Dina partners födelsedatum:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-name',\n      controlType: 'Text',\n      value: '',\n      controlMetaData: {\n        label: 'Din partners för-och efternamn:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'Din partners månadsinkomst:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-more-than-equal',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-more-than-equal',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'more than or equal partner monthly income',\n          type: RuleType.minThanEqualsReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-more-than',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-more-than',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'more than partner monthly income',\n          type: RuleType.minThanReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-less-than',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-less-than',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'less than partner monthly income',\n          type: RuleType.maxThanReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-less-than-equal',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-less-than-equal',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'less than equal partner monthly income',\n          type: RuleType.maxThanEqualReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-radio',\n      controlType: 'Radio',\n      label: '',\n      options: [\n        {\n          id: '1',\n          value: '1',\n          label: 'Före skatt',\n        },\n        {\n          id: '2',\n          value: '2',\n          label: 'Efter skatt',\n        },\n      ],\n    },\n    {\n      key: 'then-maried',\n      controlType: 'Text',\n      label: 'Gift sedan',\n    },\n  ],\n}"
            },
            {
                "name": "formGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "DynamicFormSection[]",
                "defaultValue": "[\n  {\n    key: 'form1',\n    title: 'Familj',\n    items: [\n      {\n        key: 'relation',\n        title: 'Relation',\n        controlType: 'ToggleSelector',\n        options: [\n          {\n            id: '1',\n            value: '1',\n            label: 'Gift',\n            followUpItems: familyFollowup,\n          },\n          {\n            id: '2',\n            value: '2',\n            label: 'Sambo',\n            followUpItems: familyFollowup,\n          },\n          {\n            id: '3',\n            value: '3',\n            label: 'Sarbo',\n            followUpItems: familyFollowup,\n          },\n          {\n            id: '4',\n            value: '4',\n            label: 'Singel',\n          },\n        ],\n        rules: [\n          {\n            type: RuleType.required,\n            message: 'please select one item',\n            value: '',\n          },\n        ],\n      },\n      {\n        key: 'extra-information',\n        controlType: 'Checkbox',\n        title: 'Har du och din partner något av nedstående?',\n        label: 'Äktenskapsförord',\n        value: '',\n      },\n      {\n        key: 'deed-of-gift',\n        controlType: 'Checkbox',\n        label: 'Gåvobrev',\n        value: '',\n      },\n      {\n        key: 'testament',\n        controlType: 'Checkbox',\n        label: 'Testamente',\n        value: '',\n      },\n      {\n        key: 'none-of-the-above',\n        controlType: 'Checkbox',\n        label: 'Inget av ovanstående',\n        value: '',\n      },\n      {\n        key: 'barn',\n        controlType: 'Radio',\n        title: 'Barn',\n        description: 'Har du eller din partner barn?',\n        value: '',\n        options: [\n          {\n            id: '1',\n            value: '1',\n            label: 'Ja',\n            followUpItems: {\n              type: 'modal',\n              items: [\n                {\n                  key: 'child-name',\n                  controlType: 'Text',\n                  value: '',\n                  controlMetaData: {\n                    label: 'Barnets namn',\n                  },\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                },\n                {\n                  key: 'child-to',\n                  controlType: 'Text',\n                  value: '',\n                  controlMetaData: {\n                    label: 'Barn till',\n                  },\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                },\n                {\n                  key: 'accomodation',\n                  controlType: 'Text',\n                  value: '',\n                  controlMetaData: {\n                    label: 'Boende',\n                  },\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                },\n                {\n                  key: 'child-birthday',\n                  controlType: 'Datepicker',\n                  value: '',\n                  controlMetaData: {\n                    label: 'Barnets födelsedag:',\n                  },\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                },\n                {\n                  key: 'is-child-with-partner',\n                  controlType: 'Radio',\n                  value: '',\n                  controlMetaData: {\n                    label: 'Är barnet gemensamt med din partner',\n                  },\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                  options: [\n                    {\n                      id: '1',\n                      value: '1',\n                      label: 'Ja',\n                    },\n                    {\n                      id: '2',\n                      value: '2',\n                      label: 'Nej',\n                    },\n                  ],\n                },\n                {\n                  key: 'whos-child',\n                  controlType: 'Radio',\n                  value: '',\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                  options: [\n                    {\n                      id: '1',\n                      value: '1',\n                      label: 'Barnet är mitt barn',\n                    },\n                    {\n                      id: '2',\n                      value: '2',\n                      label: 'Barnet är min partners barn',\n                    },\n                  ],\n                },\n              ],\n              multi: true,\n            },\n          },\n          {\n            id: '2',\n            value: '2',\n            label: 'Nej',\n          },\n        ],\n        rules: [\n          {\n            type: RuleType.required,\n            message: 'value is required',\n            value: '',\n          },\n        ],\n      },\n    ],\n    multi: true,\n  },\n  {\n    key: 'form2',\n    title: 'Sysselsättning',\n    items: [\n      {\n        key: 'occupation',\n        title: 'Välj din huvudsaklig sysselsättning',\n        controlType: 'ToggleSelector',\n        options: [\n          {\n            id: '1',\n            value: '1',\n            label: 'Anställd',\n          },\n          {\n            id: '2',\n            value: '2',\n            label: 'Företagare',\n          },\n          {\n            id: '3',\n            value: '3',\n            label: 'Pensionär',\n          },\n          {\n            id: '4',\n            value: '4',\n            label: 'Student',\n          },\n          {\n            id: '5',\n            value: '5',\n            label: 'Annat',\n          },\n        ],\n      },\n      {\n        key: 'profession',\n        controlType: 'Text',\n        label: 'Ditt yrke',\n        value: '',\n        rules: [\n          {\n            message: 'field is required',\n            type: RuleType.required,\n          },\n        ],\n      },\n      {\n        key: 'kind-of-employment',\n        controlType: 'Text',\n        label: 'Vilken slags anställning/tjänsterpension',\n        value: '',\n        rules: [\n          {\n            message: 'field is required',\n            type: RuleType.required,\n          },\n        ],\n      },\n      {\n        key: 'worked-since',\n        controlType: 'Text',\n        label: 'Har arbetat sedan',\n        value: '',\n        rules: [\n          {\n            message: 'field is required',\n            type: RuleType.required,\n          },\n        ],\n      },\n      {\n        key: 'monthly-income',\n        controlType: 'Text',\n        value: '',\n        controlMetaData: {\n          label: 'Din månadsinkomst',\n          inputGroupLabel: 'kr',\n          inputGroupPosition: 'right',\n        },\n        rules: [\n          {\n            message: 'field is required',\n            type: RuleType.required,\n          },\n        ],\n      },\n      {\n        key: 'estimated-income-after-tax',\n        controlType: 'Text',\n        value: '',\n        controlMetaData: {\n          label: 'Beräknad inkonst efterskatt',\n          inputGroupLabel: 'kr',\n          inputGroupPosition: 'right',\n        },\n        rules: [\n          {\n            message: 'field is required',\n            type: RuleType.required,\n          },\n        ],\n      },\n      {\n        key: 'professional-experience',\n        title: 'Yrekeserfarenhet av värdepapper eller försäkring',\n        description:\n          'Vi behöver veta om du har haft ett yrke där du lärt dig om värdepapper och finansiella marknader eftersom vi anpassar våra råd efter din kunskapsnivå och erfarenheta',\n        controlType: 'Radio',\n        value: '',\n        options: [\n          {\n            id: '1',\n            value: '1',\n            label: 'Ja, det har jag',\n          },\n          {\n            id: '2',\n            value: '2',\n            label: 'Nej, det har jag inte',\n          },\n        ],\n      },\n      {\n        key: 'other-comments',\n        controlType: 'TextArea',\n        controlMetaData: {\n          label: 'Beräknad inkonst efterskatt',\n          inputGroupLabel: 'kr',\n          inputGroupPosition: 'right',\n        },\n      },\n    ],\n  },\n]"
            },
            {
                "name": "FormValidation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "InlineConditionalRendering",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "InlineMultipleRecords",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mapControlType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/map.ts",
                "type": "",
                "defaultValue": "(controlType: ComponentType): DynamicFormType => {\n  switch (controlType) {\n    case ComponentType.Text:\n      return DynamicFormType.Text;\n    case ComponentType.Number:\n      return DynamicFormType.Number;\n    case ComponentType.CheckBox:\n      return DynamicFormType.Checkbox;\n    case ComponentType.Date:\n      return DynamicFormType.Datepicker;\n    case ComponentType.RadioTextBox:\n      return DynamicFormType.Radio;\n    case ComponentType.Card:\n      return DynamicFormType.Card;\n    case ComponentType.None:\n      return DynamicFormType.None;\n    default:\n      return DynamicFormType.Text;\n  }\n}"
            },
            {
                "name": "mapRules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/map.ts",
                "type": "",
                "defaultValue": "(rules): Rule[] => {\n  return rules.map((rule) => {\n    switch (rule.ruleType) {\n      case 0:\n      default:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.required,\n        };\n      case 1:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.pattern,\n        };\n      case 2:\n        return { value: rule.value, message: rule.message, type: RuleType.min };\n      case 3:\n        return { value: rule.value, message: rule.message, type: RuleType.max };\n      case 4:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minLength,\n        };\n      case 5:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxLength,\n        };\n      case 6:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minThanReference,\n        };\n      case 7:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minThanEqualsReference,\n        };\n      case 8:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxThanReference,\n        };\n      case 9:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxThanEqualReference,\n        };\n      case 10:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.confirm,\n        };\n    }\n  });\n}"
            },
            {
                "name": "mapToDynamicItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/map.ts",
                "type": "",
                "defaultValue": "(obj): DynamicFormItem[] => {\n  return obj?.map((o) => {\n    return {\n      key: o.id,\n      descriptionHeader: o.text,\n      description: o.description,\n      controlType: mapControlType(o.type),\n      media: o.media,\n      rules: mapRules(o.rules),\n      controlMetaData: {\n        label: o.reasonLabel,\n        inputGroupLabel: 'kr/mån',\n        inputGroupPosition: 'right',\n      },\n    };\n  });\n}"
            },
            {
                "name": "ModalConditionalRendering",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MultipleRecords",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MultiStepForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "type": "Story<DemoComponent>",
                "defaultValue": "(args: DemoComponent) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "mapToDynamicForm",
                "file": "stories/map.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "arr",
                        "type": ""
                    }
                ],
                "returnType": "DynamicFormSection[]",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "DynamicFormType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Text\" | \"TextArea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Number\" | \"Card\" | \"ToggleSelector\" | \"Disclaimer\" | \"None\"",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ExtendedFormGroupControl",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ExtendedFormControl | ExtendedFormArray | ExtendedFormGroup | ExtendedFormGroupArray",
                "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "ComponentType",
                "childs": [
                    {
                        "name": "None"
                    },
                    {
                        "name": "Card"
                    },
                    {
                        "name": "Text"
                    },
                    {
                        "name": "RadioTextBox"
                    },
                    {
                        "name": "CheckBox"
                    },
                    {
                        "name": "Number"
                    },
                    {
                        "name": "Date"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "stories/map.ts"
            },
            {
                "name": "MediaKind",
                "childs": [
                    {
                        "name": "Image"
                    },
                    {
                        "name": "Video"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
            },
            {
                "name": "QuestionOptionType",
                "childs": [
                    {
                        "name": "None"
                    },
                    {
                        "name": "Card"
                    },
                    {
                        "name": "Input"
                    },
                    {
                        "name": "Radio"
                    },
                    {
                        "name": "CheckBox"
                    },
                    {
                        "name": "Group"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "stories/map.ts"
            },
            {
                "name": "RuleType",
                "childs": [
                    {
                        "name": "required"
                    },
                    {
                        "name": "min"
                    },
                    {
                        "name": "max"
                    },
                    {
                        "name": "minLength"
                    },
                    {
                        "name": "maxLength"
                    },
                    {
                        "name": "pattern"
                    },
                    {
                        "name": "minThanReference"
                    },
                    {
                        "name": "minThanEqualsReference"
                    },
                    {
                        "name": "maxThanReference"
                    },
                    {
                        "name": "maxThanEqualReference"
                    },
                    {
                        "name": "confirm"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
            }
        ],
        "groupedVariables": {
            "stories/Demo.stories.ts": [
                {
                    "name": "acqFormData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 'd0be9c91-3211-40a1-84a1-903133b07d7a',\n    name: 'Hög eller låg risk',\n    text:\n      'Hur tänker du om risk och möjlighet till avkastning när det gäller ditt pensionssparande?',\n    description:\n      'Att pensionsspara med högre risk innebär att sparandet har bättre möjligheter att växa, men att värdet kan gå mycket upp och ner fram tills du går i pension. Det finns också en risk att sparandet sjunker i värde.Med lägre risk svänger värdet på sparandet mindre, men du har inte möjlighet till samma avkastning som när du sparar med högre risk. Däremot minskar risken för att sparandet ska sjunka mycket i värde. ',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: 'c2999eba-8d4c-4649-965c-7aacaa9960d0',\n        url: 'https://seb-external.creo.se/i/tgO5DeWBQSjGfaUrPcZyxA',\n        kind: 1,\n        mimeType: null,\n        name: null,\n        description: 'Så kan du tänka om risk (01:39)',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '116469b6-afed-42ff-b697-efecb594ab08',\n        text:\n          'Jag vill få möjlighet till högre pension, även om det innebär högre risk',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: 'fcda0671-bd08-4349-b20a-e13cd200e499',\n        text:\n          'Jag vill att sparandet får möjlighet att växa, men risken får inte vara för hög',\n        reasonLabel: null,\n        category: '',\n        value: null,\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '8a4c0290-608b-4af7-b1a9-af3d7b1d6a57',\n        text:\n          'Jag vill att risken är låg, även om sparandet får sämre möjlighet att växa',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 3,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'a8566d0f-0530-4bb8-96b0-534c3f6a4f2c',\n    name: 'Hur hög risk?',\n    text: 'Hur viktig är möjligheten till högre pension?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [],\n    answerAlternatives: [\n      {\n        id: 'cd6f3d73-1656-4395-834d-10d3d5f250b7',\n        text: 'Mycket viktig och jag är beredd på att spara med hög risk',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '310da37d-c86f-4753-964b-77cf5dcc97da',\n        text: 'Viktigt men risken får inte vara för hög',\n        reasonLabel: null,\n        category: '',\n        value: '',\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '98f8bbd3-3f2c-41e3-a2a0-502806108dd4',\n    name: 'Kortsiktig risk',\n    text:\n      'Tänk dig att du idag har ett pensionssparande som är värt 100 000 kronor. Är du bekväm med att ha hög risk i det sparandet?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: '56798cd4-6dda-4416-9f78-3d30dbb789b0',\n        url:\n          '/api/v1/media/56798cd4-6dda-4416-9f78-3d30dbb789b0/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'main',\n        description:\n          'Här ser du hur det sparandet skulle kunna utvecklas på ett år med tre olika risknivåer. Den markerade raden visar det spann som tror att sparandet skulle hamna inom utifrån hur du har svarat hittills.',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '98a2e0ce-e46b-43e1-8593-7d78a6e954a6',\n        text: 'Ja, jag är bekväm med den risknivån',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Type\": 1}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '2cf8ca43-aeee-4fa7-b3d3-1cd7e2e7a365',\n        text: 'Nej, jag vill ha en annan risknivå',\n        reasonLabel: null,\n        category: '',\n        value: null,\n        order: 2,\n        type: 1,\n        configuration:\n          '{  \"Type\": 1,  \"Control\": {    \"Title\": \"-\",    \"Text\": \"-\",    \"Deny\": \"Close\"}}',\n        media: [],\n        rules: [],\n        confirm: {\n          title: 'Ändra dina svar',\n          message:\n            'Om du vill spara med en annan risknivå behöver du gå tillbaka och se över dina svar.',\n          accept: null,\n          deny: 'Stäng',\n        },\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '8096e8ae-8eb8-4008-ba34-b97404043068',\n    name: 'Olika riskstrategier',\n    text:\n      'Tänk dig att du har 3 år kvar till hela din pension har betalats ut och ett pensionssparande på 100 000 kronor. Vilken strategi skulle du vara mest bekväm med för det här pensionssparandet?',\n    description:\n      '{\"Heading\": \"Läs mer om riskstrategierna\",\"Texts\": [{\"Subheading\": \"Vad är en riskstrategi?\",\"Content\": \"När du sparar med SEB Bot Advisor får du en personlig riskstrategi. Riskstrategin kan var vara låg, medellåg, medel, medelhög eller hög. Det är den här strategin som avgör hur hög risken i sparandet blir och hur snabbt risken sänks. Oavsett strategi är risken högre när du har lång tid kvar till sista utbetalningen från sparandet, men sänks gradvis ju äldre du blir. Vilken riskstrategi som vi tillämpar för ditt sparande beror bland annat på hur du svarar på de här frågorna.\",\"Image\": \"high-risk\"},{\"Subheading\": \"Så funkar prognoserna\",\"Content\": \"&lt;p&gt;När vi räknar på hur sparandet kan utvecklas över tid använder vi oss av avancerade beräkningsmodeller. I frågan utgår vi från ett påhittat sparande och visar ett pessimistiskt, ett optimistiskt och ett förväntat värde för tre olika riskstrategier efter ett visst antal år. Vid den tidpunkten tror vi att värdet på sparandet kommer att ligga nära det förväntade värdet, men&lt;/p&gt;&lt;ul&gt;&lt;li&gt;det är 30 procents sannolikt att sparandet utvecklas till det optimistiska värdet eller mer&lt;/li&gt;&lt;li&gt;det är mindre än 5 procents sannolikhet att sparandet utvecklas till det pessimistiska värdet eller mindre.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I exemplen räknar vi med att värdet på sparandet fortsätter att förändras under spartiden.Däremot räknar vi inte med framtida inbetalningar.&lt;/p&gt;\",\"Image\": null}]}',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: '3164e266-039f-4ac1-8b87-31c2a29ba2e9',\n        url:\n          '/api/v1/media/3164e266-039f-4ac1-8b87-31c2a29ba2e9/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'main',\n        description:\n          'I tabellen ser du hur mycket du skulle kunna få utbetalt per månad med olika strategier.',\n      },\n      {\n        id: 'a6f876e3-000c-4c6b-8f19-af8e548f3439',\n        url:\n          '/api/v1/media/a6f876e3-000c-4c6b-8f19-af8e548f3439/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'high-risk',\n        description: '',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '810ef431-5a37-4adb-90a5-6f0e55b259ca',\n        text: 'Jag är bekväm med en strategi med hög risk',\n        reasonLabel: null,\n        category: 'RISK_WILLINGNESS',\n        value: '5',\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '3f4fd955-f855-41b7-8efd-8847ca54c8fd',\n        text: 'Jag är bekväm med en strategi med medelhög risk',\n        reasonLabel: null,\n        category: 'RISK_WILLINGNESS',\n        value: '4',\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'f404a81a-ad83-47cb-aa36-922c3d7cae52',\n    name: 'Hållbart sparande',\n    text: 'Vill du pensionsspara med hållbart fokus?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription:\n      'När vi väljer fonder till ditt sparande letar vi i första hand efter hållbara fonder. Om du dessutom har en hållbar profil prioriterar vi hållbarhet ännu mer. Hållbara fonder tar hänsyn till olika miljömässiga och sociala aspekter när de investerar i företag.',\n    optionType: 1,\n    media: [\n      {\n        id: 'c5f56e2e-e8f9-4944-83db-13913e4785fe',\n        url: 'https://seb-external.creo.se/i/ve6LxUx7pESgXjKOYyRtmg',\n        kind: 1,\n        mimeType: null,\n        name: null,\n        description: 'Så kan du påverka med ditt sparande (01:33)',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: 'd8be6bcc-1ef3-460c-b58d-b68f73ee5a95',\n        text: 'Ja, jag vill spara med hållbart fokus',\n        reasonLabel: '',\n        category: 'SUSTAINABILITY',\n        value: '1',\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '8b1870cd-2587-4549-8f79-88ba46e3cdd7',\n        text: 'Nej, jag vill inte spara med hållbart fokus',\n        reasonLabel: null,\n        category: 'SUSTAINABILITY',\n        value: '0',\n        order: 2,\n        type: 1,\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '001b2885-4960-4a64-835c-48ff20b3f3d7',\n    name: '',\n    text: 'Vi behöver veta mer om din ekonomi',\n    description:\n      'För att vi ska kunna ge råd som passar dig, behöver vi ställa några frågor om din ekonomi. Ju noggrannare du svarar, desto bättre råd kan du få. Det är viktigt att du svarar på alla frågor så att du inte får råd på felaktiga grunder.',\n    subTitle: '',\n    shortDescription: '',\n    optionType: 0,\n    media: [],\n    answerAlternatives: [],\n    groupQuestionItems: [],\n  },\n  {\n    id: '1b856337-9ba7-4186-a56d-a9c145fd851a',\n    name: 'Inkomst',\n    text: 'Hur stor är din månadsinkomst efter skatt?',\n    description: '',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 2,\n    media: [],\n    answerAlternatives: [\n      {\n        id: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\n        text: 'Din lön eller pension efter skatt en genomsnittlig månad',\n        reasonLabel: 'Räkna även med bidrag och provision.',\n        category: 'MONTHLY_INCOME',\n        value: '',\n        order: 1,\n        type: 5,\n        configuration:\n          '{  \"InputType\": \"Number\",  \"IsRequired\": true,  \"Max\": 1000000000,  \"Min\": 1,  \"Version\": \"1.0.0\",  \"Type\": 2,  \"GroupLabel\": \"kr/mån\",  \"ErrorMessage\": \"Fyll i din månadsinkomst\"}',\n        media: [],\n        rules: [\n          {\n            ruleType: 0,\n            value: null,\n            message: 'Fyll i din månadsinkomst',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '1000000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '53532df5-586f-453b-a1a4-d409b6fd4a9b',\n    name: 'Kvar i månaden',\n    text:\n      'Hur mycket brukar du ha kvar efter att du har betalat alla viktiga utgifter?',\n    description:\n      'Räkna också med sådant som är viktigt för dig, till exempel restaurangbesök och sparande till resor.',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 2,\n    media: [],\n    answerAlternatives: [\n      {\n        id: 'a6e8eabd-2f14-4b23-8a6d-8cb40b9f8a14',\n        text: '',\n        reasonLabel: 'Kvar i månaden',\n        category: 'MONTHLY_AMOUNT_LEFT',\n        value: null,\n        order: 1,\n        type: 5,\n        media: [],\n        rules: [\n          {\n            ruleType: 0,\n            value: null,\n            message: 'Fyll i hur mycket du brukar ha kvar i månaden',\n          },\n          {\n            ruleType: 9,\n            value: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'c9205109-37e1-4b7d-82c3-d6a2a62dbfb2',\n    name: 'Tillgångar',\n    text: 'Lägg till dina tillgångar som du har hos eller utanför SEB.',\n    description: '',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 3,\n    media: [],\n    answerAlternatives: [\n      {\n        id: '88e329bb-c2da-46e6-927b-04c1a4eb3714',\n        text: 'Har du pengar på konton?',\n        reasonLabel: null,\n        category: 'SAVING_AMOUNT',\n        value: null,\n        order: 1,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '1000000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [\n          {\n            id: '1b856337-9ba7-4186-a56d-a9c145fd851a',\n            name: 'Inkomst',\n            text: 'Pengar på konton',\n            description: '',\n            subTitle: '',\n            shortDescription: '',\n            optionType: 2,\n            media: [],\n            answerAlternatives: [\n              {\n                id: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\n                text:\n                  'Räkna även med pengar som du har på konton hos SEB. Om du har ett konto tillsammans med någon fyller du i din del av värdet.',\n                reasonLabel: 'Värde',\n                category: 'SAVING_AMOUNT',\n                value: '',\n                order: 1,\n                type: 5,\n\n                media: [],\n                rules: [\n                  {\n                    ruleType: 0,\n                    value: null,\n                    message: 'Value required',\n                  },\n                  {\n                    ruleType: 3,\n                    value: '1000000000',\n                    message: 'Värdet kan inte vara över',\n                  },\n                  {\n                    ruleType: 2,\n                    value: '1',\n                    message:\n                      'Du behöver fylla i ett värde större än eller lika med',\n                  },\n                ],\n                confirm: null,\n                followupQuestions: [],\n              },\n            ],\n            groupQuestionItems: [],\n          },\n        ],\n      },\n      {\n        id: '05e91ea8-ffcf-4f7a-bf33-cc7c72a3692e',\n        text: 'Äger du fonder eller värdepapper?',\n        reasonLabel: '',\n        category: 'SAVING_AMOUNT',\n        value: null,\n        order: 2,\n        type: 3,\n\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '40a3d9d6-fe4a-4290-a591-e4887defd9bb',\n        text: 'Äger du någon fastighet?',\n        reasonLabel: '',\n        category: 'HOME_VALUE',\n        value: null,\n        order: 3,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: null,\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: 'b5f188a9-6ca8-4c08-9db8-bd5315316077',\n        text: 'Äger du något företag?',\n        reasonLabel: '',\n        category: 'ASSETS_VALUE',\n        value: null,\n        order: 4,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: null,\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '0c1ccfb5-4f41-4fee-bc77-d1c8fe52fc01',\n        text: 'Har du andra tillgångar?',\n        reasonLabel: '',\n        category: 'ASSETS_VALUE',\n        value: '',\n        order: 5,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: null,\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'a7c43f6c-9fc0-43bb-bc46-f5c9a6f3de85',\n    name: 'Skulder',\n    text: 'Lägg till skulder som du har hos eller utanför SEB.',\n    description: '',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 3,\n    media: [],\n    answerAlternatives: [\n      {\n        id: '6c1865c2-b3f8-4c62-81db-8c226922f704',\n        text: 'Har du bolån?',\n        reasonLabel: '',\n        category: 'HOME_MORTGAGE',\n        value: null,\n        order: 1,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 2,\n            value: '1',\n            message: null,\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '56b18f29-b891-474d-b95f-4ef055541f62',\n        text: 'Har du studielån?',\n        reasonLabel: null,\n        category: 'DEBTS',\n        value: null,\n        order: 2,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '03f82657-2ed2-4e95-bbf6-cf3d5c8c6268',\n        text: 'Har du andra lån?',\n        reasonLabel: '',\n        category: 'DEBTS',\n        value: null,\n        order: 3,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 2,\n            value: '1',\n            message: null,\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: 'c1e9b886-39e9-476e-a7c6-f4b7eba39ca7',\n        text: 'Har du någon kreditkortsskuld? ',\n        reasonLabel: '',\n        category: 'DEBTS',\n        value: null,\n        order: 4,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '1e228169-a2f3-42e5-8cc0-58473f5d53db',\n        text: 'Har du andra skulder?',\n        reasonLabel: '',\n        category: 'DEBTS',\n        value: null,\n        order: 5,\n        type: 3,\n        media: [],\n        rules: [\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n]"
                },
                {
                    "name": "AcquisitionForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ComplexForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "familyFollowup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "FollowUpItem",
                    "defaultValue": "{\n  type: 'inline',\n  items: [\n    {\n      key: 'partner-birth-date',\n      controlType: 'Datepicker',\n      value: '',\n      controlMetaData: {\n        label: 'Dina partners födelsedatum:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-name',\n      controlType: 'Text',\n      value: '',\n      controlMetaData: {\n        label: 'Din partners för-och efternamn:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'Din partners månadsinkomst:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-more-than-equal',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-more-than-equal',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'more than or equal partner monthly income',\n          type: RuleType.minThanEqualsReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-more-than',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-more-than',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'more than partner monthly income',\n          type: RuleType.minThanReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-less-than',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-less-than',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'less than partner monthly income',\n          type: RuleType.maxThanReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-less-than-equal',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-less-than-equal',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'less than equal partner monthly income',\n          type: RuleType.maxThanEqualReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-radio',\n      controlType: 'Radio',\n      label: '',\n      options: [\n        {\n          id: '1',\n          value: '1',\n          label: 'Före skatt',\n        },\n        {\n          id: '2',\n          value: '2',\n          label: 'Efter skatt',\n        },\n      ],\n    },\n    {\n      key: 'then-maried',\n      controlType: 'Text',\n      label: 'Gift sedan',\n    },\n  ],\n}"
                },
                {
                    "name": "formGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "DynamicFormSection[]",
                    "defaultValue": "[\n  {\n    key: 'form1',\n    title: 'Familj',\n    items: [\n      {\n        key: 'relation',\n        title: 'Relation',\n        controlType: 'ToggleSelector',\n        options: [\n          {\n            id: '1',\n            value: '1',\n            label: 'Gift',\n            followUpItems: familyFollowup,\n          },\n          {\n            id: '2',\n            value: '2',\n            label: 'Sambo',\n            followUpItems: familyFollowup,\n          },\n          {\n            id: '3',\n            value: '3',\n            label: 'Sarbo',\n            followUpItems: familyFollowup,\n          },\n          {\n            id: '4',\n            value: '4',\n            label: 'Singel',\n          },\n        ],\n        rules: [\n          {\n            type: RuleType.required,\n            message: 'please select one item',\n            value: '',\n          },\n        ],\n      },\n      {\n        key: 'extra-information',\n        controlType: 'Checkbox',\n        title: 'Har du och din partner något av nedstående?',\n        label: 'Äktenskapsförord',\n        value: '',\n      },\n      {\n        key: 'deed-of-gift',\n        controlType: 'Checkbox',\n        label: 'Gåvobrev',\n        value: '',\n      },\n      {\n        key: 'testament',\n        controlType: 'Checkbox',\n        label: 'Testamente',\n        value: '',\n      },\n      {\n        key: 'none-of-the-above',\n        controlType: 'Checkbox',\n        label: 'Inget av ovanstående',\n        value: '',\n      },\n      {\n        key: 'barn',\n        controlType: 'Radio',\n        title: 'Barn',\n        description: 'Har du eller din partner barn?',\n        value: '',\n        options: [\n          {\n            id: '1',\n            value: '1',\n            label: 'Ja',\n            followUpItems: {\n              type: 'modal',\n              items: [\n                {\n                  key: 'child-name',\n                  controlType: 'Text',\n                  value: '',\n                  controlMetaData: {\n                    label: 'Barnets namn',\n                  },\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                },\n                {\n                  key: 'child-to',\n                  controlType: 'Text',\n                  value: '',\n                  controlMetaData: {\n                    label: 'Barn till',\n                  },\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                },\n                {\n                  key: 'accomodation',\n                  controlType: 'Text',\n                  value: '',\n                  controlMetaData: {\n                    label: 'Boende',\n                  },\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                },\n                {\n                  key: 'child-birthday',\n                  controlType: 'Datepicker',\n                  value: '',\n                  controlMetaData: {\n                    label: 'Barnets födelsedag:',\n                  },\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                },\n                {\n                  key: 'is-child-with-partner',\n                  controlType: 'Radio',\n                  value: '',\n                  controlMetaData: {\n                    label: 'Är barnet gemensamt med din partner',\n                  },\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                  options: [\n                    {\n                      id: '1',\n                      value: '1',\n                      label: 'Ja',\n                    },\n                    {\n                      id: '2',\n                      value: '2',\n                      label: 'Nej',\n                    },\n                  ],\n                },\n                {\n                  key: 'whos-child',\n                  controlType: 'Radio',\n                  value: '',\n                  rules: [\n                    {\n                      message: 'field is required',\n                      type: RuleType.required,\n                    },\n                  ],\n                  options: [\n                    {\n                      id: '1',\n                      value: '1',\n                      label: 'Barnet är mitt barn',\n                    },\n                    {\n                      id: '2',\n                      value: '2',\n                      label: 'Barnet är min partners barn',\n                    },\n                  ],\n                },\n              ],\n              multi: true,\n            },\n          },\n          {\n            id: '2',\n            value: '2',\n            label: 'Nej',\n          },\n        ],\n        rules: [\n          {\n            type: RuleType.required,\n            message: 'value is required',\n            value: '',\n          },\n        ],\n      },\n    ],\n    multi: true,\n  },\n  {\n    key: 'form2',\n    title: 'Sysselsättning',\n    items: [\n      {\n        key: 'occupation',\n        title: 'Välj din huvudsaklig sysselsättning',\n        controlType: 'ToggleSelector',\n        options: [\n          {\n            id: '1',\n            value: '1',\n            label: 'Anställd',\n          },\n          {\n            id: '2',\n            value: '2',\n            label: 'Företagare',\n          },\n          {\n            id: '3',\n            value: '3',\n            label: 'Pensionär',\n          },\n          {\n            id: '4',\n            value: '4',\n            label: 'Student',\n          },\n          {\n            id: '5',\n            value: '5',\n            label: 'Annat',\n          },\n        ],\n      },\n      {\n        key: 'profession',\n        controlType: 'Text',\n        label: 'Ditt yrke',\n        value: '',\n        rules: [\n          {\n            message: 'field is required',\n            type: RuleType.required,\n          },\n        ],\n      },\n      {\n        key: 'kind-of-employment',\n        controlType: 'Text',\n        label: 'Vilken slags anställning/tjänsterpension',\n        value: '',\n        rules: [\n          {\n            message: 'field is required',\n            type: RuleType.required,\n          },\n        ],\n      },\n      {\n        key: 'worked-since',\n        controlType: 'Text',\n        label: 'Har arbetat sedan',\n        value: '',\n        rules: [\n          {\n            message: 'field is required',\n            type: RuleType.required,\n          },\n        ],\n      },\n      {\n        key: 'monthly-income',\n        controlType: 'Text',\n        value: '',\n        controlMetaData: {\n          label: 'Din månadsinkomst',\n          inputGroupLabel: 'kr',\n          inputGroupPosition: 'right',\n        },\n        rules: [\n          {\n            message: 'field is required',\n            type: RuleType.required,\n          },\n        ],\n      },\n      {\n        key: 'estimated-income-after-tax',\n        controlType: 'Text',\n        value: '',\n        controlMetaData: {\n          label: 'Beräknad inkonst efterskatt',\n          inputGroupLabel: 'kr',\n          inputGroupPosition: 'right',\n        },\n        rules: [\n          {\n            message: 'field is required',\n            type: RuleType.required,\n          },\n        ],\n      },\n      {\n        key: 'professional-experience',\n        title: 'Yrekeserfarenhet av värdepapper eller försäkring',\n        description:\n          'Vi behöver veta om du har haft ett yrke där du lärt dig om värdepapper och finansiella marknader eftersom vi anpassar våra råd efter din kunskapsnivå och erfarenheta',\n        controlType: 'Radio',\n        value: '',\n        options: [\n          {\n            id: '1',\n            value: '1',\n            label: 'Ja, det har jag',\n          },\n          {\n            id: '2',\n            value: '2',\n            label: 'Nej, det har jag inte',\n          },\n        ],\n      },\n      {\n        key: 'other-comments',\n        controlType: 'TextArea',\n        controlMetaData: {\n          label: 'Beräknad inkonst efterskatt',\n          inputGroupLabel: 'kr',\n          inputGroupPosition: 'right',\n        },\n      },\n    ],\n  },\n]"
                },
                {
                    "name": "FormValidation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "InlineConditionalRendering",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "InlineMultipleRecords",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ModalConditionalRendering",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MultipleRecords",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MultiStepForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "type": "Story<DemoComponent>",
                    "defaultValue": "(args: DemoComponent) => ({\n  props: args,\n})"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormItem.ts": [
                {
                    "name": "attributeTypeMapDynamicFormItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n]"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormOption.ts": [
                {
                    "name": "attributeTypeMapDynamicFormOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n]"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts": [
                {
                    "name": "attributeTypeMapDynamicFormResponseItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"sectionId\", type: \"string\" },\n    { name: \"sectionIndex\", type: \"number\" },\n    { name: \"formItem\", type: \"DynamicFormItem\" },\n]"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormSection.ts": [
                {
                    "name": "attributeTypeMapDynamicFormSection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\n    { name: \"title\", type: \"string\" },\n    { name: \"category\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"key\", type: \"string\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"sectionType\", type: \"any\" },\n    { name: \"items\", type: \"Array<DynamicFormItem>\" },\n]"
                }
            ],
            "projects/dynamic-form/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormType.ts": [
                {
                    "name": "DynamicFormType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                    "type": "object",
                    "defaultValue": "{\n    Text: \"Text\" as DynamicFormType,\n    TextArea: \"TextArea\" as DynamicFormType,\n    Checkbox: \"Checkbox\" as DynamicFormType,\n    Dropdown: \"Dropdown\" as DynamicFormType,\n    Datepicker: \"Datepicker\" as DynamicFormType,\n    Radio: \"Radio\" as DynamicFormType,\n    Number: \"Number\" as DynamicFormType,\n    Card: \"Card\" as DynamicFormType,\n    ToggleSelector: \"ToggleSelector\" as DynamicFormType,\n    Disclaimer: \"Disclaimer\" as DynamicFormType,\n    None: \"None\" as DynamicFormType,\n}"
                }
            ],
            "stories/map.ts": [
                {
                    "name": "mapControlType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/map.ts",
                    "type": "",
                    "defaultValue": "(controlType: ComponentType): DynamicFormType => {\n  switch (controlType) {\n    case ComponentType.Text:\n      return DynamicFormType.Text;\n    case ComponentType.Number:\n      return DynamicFormType.Number;\n    case ComponentType.CheckBox:\n      return DynamicFormType.Checkbox;\n    case ComponentType.Date:\n      return DynamicFormType.Datepicker;\n    case ComponentType.RadioTextBox:\n      return DynamicFormType.Radio;\n    case ComponentType.Card:\n      return DynamicFormType.Card;\n    case ComponentType.None:\n      return DynamicFormType.None;\n    default:\n      return DynamicFormType.Text;\n  }\n}"
                },
                {
                    "name": "mapRules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/map.ts",
                    "type": "",
                    "defaultValue": "(rules): Rule[] => {\n  return rules.map((rule) => {\n    switch (rule.ruleType) {\n      case 0:\n      default:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.required,\n        };\n      case 1:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.pattern,\n        };\n      case 2:\n        return { value: rule.value, message: rule.message, type: RuleType.min };\n      case 3:\n        return { value: rule.value, message: rule.message, type: RuleType.max };\n      case 4:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minLength,\n        };\n      case 5:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxLength,\n        };\n      case 6:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minThanReference,\n        };\n      case 7:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minThanEqualsReference,\n        };\n      case 8:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxThanReference,\n        };\n      case 9:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxThanEqualReference,\n        };\n      case 10:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.confirm,\n        };\n    }\n  });\n}"
                },
                {
                    "name": "mapToDynamicItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/map.ts",
                    "type": "",
                    "defaultValue": "(obj): DynamicFormItem[] => {\n  return obj?.map((o) => {\n    return {\n      key: o.id,\n      descriptionHeader: o.text,\n      description: o.description,\n      controlType: mapControlType(o.type),\n      media: o.media,\n      rules: mapRules(o.rules),\n      controlMetaData: {\n        label: o.reasonLabel,\n        inputGroupLabel: 'kr/mån',\n        inputGroupPosition: 'right',\n      },\n    };\n  });\n}"
                }
            ]
        },
        "groupedFunctions": {
            "stories/map.ts": [
                {
                    "name": "mapToDynamicForm",
                    "file": "stories/map.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "arr",
                            "type": ""
                        }
                    ],
                    "returnType": "DynamicFormSection[]",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "stories/map.ts": [
                {
                    "name": "ComponentType",
                    "childs": [
                        {
                            "name": "None"
                        },
                        {
                            "name": "Card"
                        },
                        {
                            "name": "Text"
                        },
                        {
                            "name": "RadioTextBox"
                        },
                        {
                            "name": "CheckBox"
                        },
                        {
                            "name": "Number"
                        },
                        {
                            "name": "Date"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "stories/map.ts"
                },
                {
                    "name": "QuestionOptionType",
                    "childs": [
                        {
                            "name": "None"
                        },
                        {
                            "name": "Card"
                        },
                        {
                            "name": "Input"
                        },
                        {
                            "name": "Radio"
                        },
                        {
                            "name": "CheckBox"
                        },
                        {
                            "name": "Group"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "stories/map.ts"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormItem.ts": [
                {
                    "name": "MediaKind",
                    "childs": [
                        {
                            "name": "Image"
                        },
                        {
                            "name": "Video"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
                },
                {
                    "name": "RuleType",
                    "childs": [
                        {
                            "name": "required"
                        },
                        {
                            "name": "min"
                        },
                        {
                            "name": "max"
                        },
                        {
                            "name": "minLength"
                        },
                        {
                            "name": "maxLength"
                        },
                        {
                            "name": "pattern"
                        },
                        {
                            "name": "minThanReference"
                        },
                        {
                            "name": "minThanEqualsReference"
                        },
                        {
                            "name": "maxThanReference"
                        },
                        {
                            "name": "maxThanEqualReference"
                        },
                        {
                            "name": "confirm"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/dynamic-form/src/lib/model/dynamicFormType.ts": [
                {
                    "name": "DynamicFormType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Text\" | \"TextArea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Number\" | \"Card\" | \"ToggleSelector\" | \"Disclaimer\" | \"None\"",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts": [
                {
                    "name": "ExtendedFormGroupControl",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ExtendedFormControl | ExtendedFormArray | ExtendedFormGroup | ExtendedFormGroupArray",
                    "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/dynamic-form/src/lib/digit-only/digit-only.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DigitOnlyDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-item/dynamic-form-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-media/dynamic-form-media.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormMediaComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-modal/dynamic-form-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormComponent",
                "coveragePercent": 11,
                "coverageCount": "4/36",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicFormValidationError",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-from-data/dynamic-form-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormDataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-array.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormArray",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-control.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group-array.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormGroupArray",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExtendedFormGroupControls",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormItem",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "formItemValidation",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Media",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Rule",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmInformation",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormOption",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FollowUpItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormResponseItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormResponseItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormSection",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormSection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DynamicFormType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AttributeTypeMap",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/safe.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "acqFormData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AcquisitionForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComplexForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "familyFollowup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormValidation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InlineConditionalRendering",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InlineMultipleRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ModalConditionalRendering",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiStepForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapToDynamicForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapControlType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapRules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapToDynamicItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}